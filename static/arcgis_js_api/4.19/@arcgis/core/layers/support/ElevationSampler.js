/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import"../../chunks/tslib.es6.js";import"../../chunks/ArrayPool.js";import"../../core/lang.js";import"../../chunks/deprecate.js";import"../../chunks/object.js";import"../../config.js";import{L as e,c as t}from"../../chunks/Logger.js";import"../../chunks/string.js";import"../../chunks/metadata.js";import"../../core/accessorSupport/decorators/property.js";import"../../core/Accessor.js";import"../../chunks/PropertyOrigin.js";import"../../core/scheduling.js";import"../../core/promiseUtils.js";import"../../chunks/Message.js";import"../../core/Error.js";import"../../chunks/ensureType.js";import"../../core/accessorSupport/decorators/subclass.js";import"../../chunks/JSONSupport.js";import"../../core/urlUtils.js";import"../../core/accessorSupport/decorators/cast.js";import"../../chunks/jsonMap.js";import"../../chunks/reader.js";import"../../chunks/writer.js";import"../../chunks/resourceExtension.js";import"../../geometry/SpatialReference.js";import"../../geometry/Geometry.js";import s from"../../geometry/Point.js";import"../../chunks/Ellipsoid.js";import{canProject as o,project as r}from"../../geometry/support/webMercatorUtils.js";import{e as i}from"../../geometry/Extent.js";import"../../chunks/zmUtils.js";import"../../geometry/Multipoint.js";import"../../geometry/Polygon.js";import"../../chunks/extentUtils.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import"../../geometry/support/jsonUtils.js";import"../../geometry.js";import{a as n}from"../../chunks/unitUtils.js";import{t as a,c as l}from"../../chunks/aaBoundingRect.js";const p=e.getLogger("esri.layers.support.ElevationSampler");class c{queryElevation(e){return h(e.clone(),this)}on(){return x}projectIfRequired(e,t){return f(e,t)}}class m extends c{constructor(e,t,s){super(),this.tile=e,this.noDataValue=s,this.extent=a(e.tile.extent,t.spatialReference);const o=n(t.spatialReference),r=t.lodAt(e.tile.level).resolution*o;this.demResolution={min:r,max:r}}get spatialReference(){return this.extent.spatialReference}contains(e){const t=this.projectIfRequired(e,this.spatialReference);return i(this.extent,t)}elevationAt(e){const t=this.projectIfRequired(e,this.spatialReference);if(!t)return null;if(!this.contains(e)){const t=this.extent,s=`${t.xmin}, ${t.ymin}, ${t.xmax}, ${t.ymax}`;p.warn("#elevationAt()",`Point used to sample elevation (${e.x}, ${e.y}) is outside of the sampler extent (${s})`)}return this.tile.sample(t.x,t.y)}}class u extends c{constructor(e,t,s){let o;super(),"number"==typeof t?(this.noDataValue=t,o=null):(o=t,this.noDataValue=s),this.samplers=o?e.map((e=>new m(e,o,this.noDataValue))):e;const r=this.samplers[0];if(r){this.extent=r.extent.clone();const{min:e,max:t}=r.demResolution;this.demResolution={min:e,max:t};for(let e=1;e<this.samplers.length;e++){const t=this.samplers[e];this.extent.union(t.extent),this.demResolution.min=Math.min(this.demResolution.min,t.demResolution.min),this.demResolution.max=Math.max(this.demResolution.max,t.demResolution.max)}}else this.extent=a(l(),o.spatialReference),this.demResolution={min:0,max:0}}get spatialReference(){return this.extent.spatialReference}elevationAt(e){const t=this.projectIfRequired(e,this.spatialReference);if(!t)return null;for(const e of this.samplers)if(e.contains(t))return e.elevationAt(t);return p.warn("#elevationAt()",`Point used to sample elevation (${e.x}, ${e.y}) is outside of the sampler`),null}}function h(e,s){const o=f(e,s.spatialReference);if(!o)return null;switch(e.type){case"point":!function(e,s,o){e.z=t(o.elevationAt(s),0)}(e,o,s);break;case"polyline":!function(e,s,o){j.spatialReference=s.spatialReference;const r=e.hasM&&!e.hasZ;for(let i=0;i<e.paths.length;i++){const n=e.paths[i],a=s.paths[i];for(let e=0;e<n.length;e++){const s=n[e],i=a[e];j.x=i[0],j.y=i[1],r&&(s[3]=s[2]),s[2]=t(o.elevationAt(j),0)}}e.hasZ=!0}(e,o,s);break;case"multipoint":!function(e,s,o){j.spatialReference=s.spatialReference;const r=e.hasM&&!e.hasZ;for(let i=0;i<e.points.length;i++){const n=e.points[i],a=s.points[i];j.x=a[0],j.y=a[1],r&&(n[3]=n[2]),n[2]=t(o.elevationAt(j),0)}e.hasZ=!0}(e,o,s)}return e}function f(e,t){const s=e.spatialReference;return s.equals(t)?e:o(s,t)?r(e,t):(p.error(`Cannot project geometry spatial reference (wkid:${s.wkid}) to elevation sampler spatial reference (wkid:${t.wkid})`),null)}const j=new s,x={remove(){}};export{c as ElevationSamplerBase,u as MultiTileElevationSampler,m as TileElevationSampler,h as updateGeometryElevation};
