/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import"../../chunks/ArrayPool.js";import"../../core/lang.js";import"../../chunks/deprecate.js";import"../../chunks/object.js";import"../../config.js";import{L as e}from"../../chunks/Logger.js";import"../../chunks/string.js";import"../../chunks/metadata.js";import{property as o}from"../../core/accessorSupport/decorators/property.js";import"../../core/Accessor.js";import"../../chunks/PropertyOrigin.js";import"../../core/scheduling.js";import"../../core/promiseUtils.js";import"../../chunks/Message.js";import r from"../../core/Error.js";import"../../chunks/ensureType.js";import{subclass as i}from"../../core/accessorSupport/decorators/subclass.js";import{E as s}from"../../chunks/Evented.js";import a from"../../core/Collection.js";import"../../chunks/JSONSupport.js";import"../../core/urlUtils.js";import"../../core/accessorSupport/decorators/cast.js";import"../../chunks/jsonMap.js";import"../../chunks/reader.js";import"../../chunks/writer.js";import"../../chunks/resourceExtension.js";import"../../geometry/SpatialReference.js";import"../../geometry/Geometry.js";import"../../geometry/Point.js";import"../../chunks/Ellipsoid.js";import"../../geometry/support/webMercatorUtils.js";import"../../geometry/Extent.js";import"../../chunks/mathUtils2.js";import"../../chunks/vec3f64.js";import"../../chunks/common.js";import"../../chunks/vec3.js";import"../../chunks/mathUtils.js";import"../../Camera.js";import"../../chunks/zmUtils.js";import"../../geometry/Multipoint.js";import"../../geometry/Polygon.js";import"../../chunks/extentUtils.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import"../../geometry/support/jsonUtils.js";import"../../geometry.js";import"../../chunks/Identifiable.js";import n from"../../Viewpoint.js";import{T as c}from"../../chunks/Thumbnail2.js";import p from"../../webmap/Bookmark.js";import{G as m}from"../../chunks/GoTo.js";const u="esri.widgets.Bookmarks.BookmarksViewModel",l=e.getLogger(u),k=a.ofType(p),h={width:128,height:128,format:"png"},d={takeScreenshot:!0,captureViewpoint:!0,captureRotation:!0,captureScale:!0};let j=class extends(m(s.EventedAccessor)){constructor(t){super(t),this.activeBookmark=null}destroy(){this.view=null,this._set("activeBookmark",null)}set bookmarks(t){void 0!==t?this._override("bookmarks",t):this._clearOverride("bookmarks")}get bookmarks(){return this.get("view.map.bookmarks")||new k}set defaultCreateOptions(t){this._set("defaultCreateOptions",{...d,...t})}get defaultCreateOptions(){return d}set defaultEditOptions(t){this._set("defaultEditOptions",{...d,...t})}get defaultEditOptions(){return d}get state(){const t=this.get("view");return t&&!t.ready?"loading":"ready"}get view(){return this._get("view")}set view(t){t&&"2d"!==t.type&&l.error(new r("view:invalid-view","SceneView is not supported",{view:t})),this._set("view",t)}async createBookmark(t){const{view:e,defaultCreateOptions:o}=this;if(!e){const t=new r("create-bookmark:invalid-view","Cannot create a bookmark without a view.");return l.error(t),Promise.reject(t)}const{takeScreenshot:i,screenshotSettings:s,captureExtent:a,captureViewpoint:n,captureRotation:c,captureScale:m}={...o,...t},u=i?await this._createThumbnail(s):void 0;return new p({...u&&{thumbnail:u},...(n||a)&&{viewpoint:this._createViewpoint({view:e,captureScale:m,captureRotation:c})}})}async editBookmark(t,e){const{view:o,defaultEditOptions:i}=this;if(!o){const t=new r("edit-bookmark:invalid-view","Cannot edit a bookmark without a view.");return l.error(t),Promise.reject(t)}const{takeScreenshot:s,screenshotSettings:a,captureExtent:n,captureViewpoint:c,captureRotation:p,captureScale:m}={...i,...e},u=s?await this._createThumbnail(a):void 0;return u&&(t.thumbnail=u),(c||n)&&(t.viewpoint=this._createViewpoint({view:o,captureScale:m,captureRotation:p})),this.emit("bookmark-edit",{bookmark:t}),t}goTo(t){const{view:e}=this;if(!e){const t=new r("go-to:invalid-view","Cannot go to a bookmark without a view");return l.error(t),Promise.reject(t)}const o=null==t?void 0:t.viewpoint;if(!o){const e=new r("go-to:invalid-bookmark","Cannot go to a bookmark that does not contain a 'viewpoint'.",{bookmark:t});return l.error(e),Promise.reject(e)}this._set("activeBookmark",t);const i={target:o},s=this.callGoTo(i);return this.emit("select-bookmark",{bookmark:t}),this.emit("bookmark-select",{bookmark:t}),s.catch((()=>{})).then((()=>this._set("activeBookmark",null))),s}async _createThumbnail(t){const e=await this.view.takeScreenshot({...h,...t});return new c({url:e.dataUrl})}_createViewpoint({view:t,captureRotation:e,captureScale:o}){var r,i;const s=null==(r=t.viewpoint)?void 0:r.clone();return new n({targetGeometry:null==(i=t.extent)?void 0:i.clone(),rotation:e&&(null==s?void 0:s.rotation)||0,scale:o&&(null==s?void 0:s.scale)||0})}};t([o({readOnly:!0})],j.prototype,"activeBookmark",void 0),t([o({type:k})],j.prototype,"bookmarks",null),t([o()],j.prototype,"defaultCreateOptions",null),t([o()],j.prototype,"defaultEditOptions",null),t([o({readOnly:!0})],j.prototype,"state",null),t([o({value:null})],j.prototype,"view",null),j=t([i(u)],j);var w=j;export default w;
