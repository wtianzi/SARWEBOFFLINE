/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import"../chunks/ArrayPool.js";import"../core/lang.js";import"../chunks/deprecate.js";import"../chunks/object.js";import"../kernel.js";import"../config.js";import{L as t}from"../chunks/Logger.js";import"../chunks/string.js";import"../chunks/metadata.js";import{property as s}from"../core/accessorSupport/decorators/property.js";import r from"../core/Accessor.js";import"../chunks/PropertyOrigin.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"../chunks/Message.js";import"../core/Error.js";import"../chunks/ensureType.js";import{subclass as o}from"../core/accessorSupport/decorators/subclass.js";import{E as i}from"../chunks/Evented.js";import n from"../core/Collection.js";import"../chunks/JSONSupport.js";import"../core/urlUtils.js";import"../core/accessorSupport/decorators/cast.js";import"../chunks/jsonMap.js";import"../chunks/enumeration.js";import"../chunks/reader.js";import"../chunks/writer.js";import"../chunks/resourceExtension.js";import"../geometry/SpatialReference.js";import"../request.js";import"../chunks/assets.js";import"../geometry/Geometry.js";import"../geometry/Point.js";import"../chunks/Ellipsoid.js";import{canProject as a}from"../geometry/support/webMercatorUtils.js";import{e as p}from"../geometry/Extent.js";import"../chunks/mathUtils2.js";import"../chunks/vec3f64.js";import"../chunks/common.js";import"../chunks/vec3.js";import"../chunks/zmUtils.js";import"../geometry/Multipoint.js";import"../geometry/Polygon.js";import"../chunks/extentUtils.js";import"../geometry/Polyline.js";import"../chunks/typeUtils.js";import"../geometry/support/jsonUtils.js";import"../geometry.js";import"../layers/support/CodedValueDomain.js";import"../layers/support/Domain.js";import"../layers/support/InheritedDomain.js";import"../layers/support/RangeDomain.js";import"../chunks/domains.js";import"../chunks/uid.js";import m from"../core/Handles.js";import"../chunks/unitUtils.js";import{when as l}from"../core/watchUtils.js";import"../chunks/fieldType.js";import"../chunks/mat4.js";import"../chunks/pe.js";import{t as u}from"../chunks/aaBoundingRect.js";import"../chunks/geodesicConstants.js";import"../geometry/support/GeographicTransformationStep.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/projection.js";import"../layers/support/LOD.js";import"../layers/support/TileInfo.js";import"../layers/support/Field.js";import"../chunks/aaBoundingBox.js";import{updateGeometryElevation as c}from"../layers/support/ElevationSampler.js";import"../chunks/quantizationUtils.js";import"../chunks/byteSizeEstimations.js";import"../chunks/dehydratedFeatures.js";import{g as h}from"../chunks/ElevationProvider.js";import{E as d}from"../chunks/TerrainConst.js";const j=t.getLogger("esri.views.support.GroundViewElevationSampler");let y=class extends i.EventedAccessor{constructor(e){super(e),this.demResolution={min:-1,max:-1},this.noDataValue=d}initialize(){this.view.basemapTerrain.on("elevation-change",(()=>this.emit("changed",{})))}get extent(){const e=this.view.basemapTerrain;return e.extent&&e.spatialReference?u(e.extent,e.spatialReference):null}elevationAt(e){const t=e.spatialReference,s=this.spatialReference;if(!a(t,s)){const e=t?t.wkid:"unknown";return j.error(`Cannot sample elevation at a location with spatial reference (${e}) different from the view (${s.wkid})`),null}if(!p(this.extent,e)){const t=this.extent,s=`${t.xmin}, ${t.ymin}, ${t.xmax}, ${t.ymax}`;j.warn("#elevationAt()",`Point used to sample elevation (${e.x}, ${e.y}) is outside of the sampler extent (${s})`)}return h(this.view.elevationProvider,e)}queryElevation(e){return c(e.clone(),this)}};e([s({readOnly:!0})],y.prototype,"demResolution",void 0),e([s({readOnly:!0})],y.prototype,"extent",null),e([s({readOnly:!0})],y.prototype,"noDataValue",void 0),e([s({readOnly:!0,aliasOf:"view.basemapTerrain.spatialReference"})],y.prototype,"spatialReference",void 0),e([s({constructOnly:!0})],y.prototype,"view",void 0),y=e([o("esri.views.support.GroundViewElevationSampler")],y);var g=y;let v=class extends r{constructor(e){super(e),this.handles=new m,this.view=null,this.layerViews=new n}initialize(){this.handles.add(l(this,"view.map.ground",(e=>e.load()))),this.handles.add(this.layerViews.on("after-changes",(()=>this.layerViewsAfterChangesHandler())))}destroy(){this._set("view",null),this.handles&&(this.handles.destroy(),this.handles=null)}get elevationSampler(){return this.view?"2d"===this.view.type?null:this.view.ready&&this.view.basemapTerrain&&this.view.basemapTerrain.ready?new g({view:this.view}):null:null}get updating(){return!this.suspended&&this.layerViews.some((e=>e.updating))}get suspended(){return!this.view||this.view.suspended}layerViewsAfterChangesHandler(){this.handles.remove("updating"),this.handles.add(this.layerViews.map((e=>e.watch("updating",(()=>this.updateUpdating()),!0))).toArray(),"updating"),this.updateUpdating()}updateUpdating(){this.notifyChange("updating")}};e([s({readOnly:!0})],v.prototype,"elevationSampler",null),e([s({type:Boolean,readOnly:!0})],v.prototype,"updating",null),e([s({constructOnly:!0})],v.prototype,"view",void 0),e([s({type:n,readOnly:!0})],v.prototype,"layerViews",void 0),e([s({readOnly:!0})],v.prototype,"suspended",null),v=e([o("esri.views.GroundView")],v);var k=v;export default k;
