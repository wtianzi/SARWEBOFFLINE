/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../chunks/ArrayPool.js";import"../../core/lang.js";import"../../chunks/deprecate.js";import"../../chunks/object.js";import"../../config.js";import"../../chunks/Logger.js";import"../../chunks/string.js";import"../../chunks/metadata.js";import{property as t}from"../../core/accessorSupport/decorators/property.js";import"../../core/Accessor.js";import"../../chunks/PropertyOrigin.js";import"../../core/scheduling.js";import"../../core/promiseUtils.js";import"../../chunks/Message.js";import"../../core/Error.js";import"../../chunks/ensureType.js";import{subclass as o}from"../../core/accessorSupport/decorators/subclass.js";import{a as s}from"../../chunks/JSONSupport.js";import"../../core/urlUtils.js";import"../../core/accessorSupport/decorators/cast.js";import{J as r}from"../../chunks/jsonMap.js";import"../../chunks/reader.js";import"../../chunks/writer.js";import"../../chunks/resourceExtension.js";import i from"../../geometry/SpatialReference.js";import"../../geometry/Geometry.js";import"../../geometry/Point.js";import"../../chunks/Ellipsoid.js";import"../../geometry/support/webMercatorUtils.js";import"../../geometry/Extent.js";import"../../chunks/zmUtils.js";import"../../geometry/Multipoint.js";import p from"../../geometry/Polygon.js";import"../../chunks/extentUtils.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import{getJsonType as n}from"../../geometry/support/jsonUtils.js";import{geometryTypes as m}from"../../geometry.js";const c=new r({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});let u=class extends s{constructor(e){super(e),this.bufferSpatialReference=null,this.distances=null,this.geodesic=!1,this.geometries=null,this.outSpatialReference=null,this.unionResults=!1,this.unit=null}toJSON(){const e={unit:c.toJSON(this.unit),unionResults:this.unionResults,geodesic:this.geodesic},t=this.distances,o=this.outSpatialReference,s=this.bufferSpatialReference,r=this.geometries;if(r&&r.length>0){const t=r.map((function(e){return(e="extent"===e.type?p.fromExtent(e):e).toJSON()})),o="extent"===r[0].type?"esriGeometryPolygon":n(r[0]);e.geometries=JSON.stringify({geometryType:o,geometries:t}),e.inSR=r[0].spatialReference.wkid?r[0].spatialReference.wkid:JSON.stringify(r[0].spatialReference.toJSON())}return t&&(e.distances=t.join(",")),o&&(e.outSR=o.wkid?o.wkid:JSON.stringify(o.toJSON())),s&&(e.bufferSR=s.wkid?s.wkid:JSON.stringify(s.toJSON())),e}};e([t({type:i,json:{write:!0}})],u.prototype,"bufferSpatialReference",void 0),e([t({type:[Number],json:{write:!0}})],u.prototype,"distances",void 0),e([t({type:Boolean,json:{write:!0}})],u.prototype,"geodesic",void 0),e([t({types:[m],json:{write:!0}})],u.prototype,"geometries",void 0),e([t({type:i,json:{write:!0}})],u.prototype,"outSpatialReference",void 0),e([t({type:Boolean,json:{write:!0}})],u.prototype,"unionResults",void 0),e([t({type:String,json:{write:!0}})],u.prototype,"unit",void 0),u=e([o("esri.tasks.support.BufferParameters")],u);var a=u;export default a;
