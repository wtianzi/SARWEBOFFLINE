/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import"./tslib.es6.js";import"./ArrayPool.js";import"../core/lang.js";import"./deprecate.js";import"./object.js";import"../config.js";import{h as t,r as e,b as s,i,d as r}from"./Logger.js";import"./string.js";import"./metadata.js";import"../core/accessorSupport/decorators/property.js";import{c as o}from"../core/Accessor.js";import"./PropertyOrigin.js";import"../core/scheduling.js";import{createTask as p,throwIfAborted as a}from"../core/promiseUtils.js";import"./Message.js";import"../core/Error.js";import"./ensureType.js";import"../core/accessorSupport/decorators/subclass.js";import"./Evented.js";import"../core/Collection.js";import"./JSONSupport.js";import"../core/urlUtils.js";import"../core/accessorSupport/decorators/cast.js";import"./jsonMap.js";import"./reader.js";import"./writer.js";import"./resourceExtension.js";import"../geometry/SpatialReference.js";import"../geometry/Geometry.js";import"../geometry/Point.js";import"./Ellipsoid.js";import"../geometry/support/webMercatorUtils.js";import"./mathUtils2.js";import"./colorUtils.js";import"../Color.js";import n from"../core/Handles.js";import"./unitUtils.js";import"../core/watchUtils.js";import"./vec4f64.js";import"./AnchorElementViewModel.js";import{h}from"./layerViewUtils.js";import{E as m}from"./ElevationProfileLine.js";import{H as l}from"./HoveredPoints.js";class c{constructor(t){this._params=t,this._highlightTask=null,this._highlightHandle=null}destroy(){this.remove()}remove(){this._highlightTask=t(this._highlightTask),this._highlightHandle=e(this._highlightHandle)}update(t){if(this.remove(),s(t)||!function(t){return i(t.geometry)&&"polyline"===t.geometry.type}(t))return;const e=t.layer;this._highlightTask=p((async s=>{const i=await this._params.view.whenLayerView(e);a(s),h(i)&&(this._highlightHandle=i.highlight(t))}))}}class j{constructor(t,e){this._handles=new n,this._inputRepresentation=new c({view:t}),this._hoveredPoints=new l({view:t}),this._handles.add([o((()=>e.viewModel.hoveredPoints),(t=>this._hoveredPoints.update(t))),o((()=>({input:e.viewModel.input,state:e.state})),(({input:t,state:e})=>this._updateInputRepresentation(t,e)))])}destroy(){this._handles=r(this._handles),this._inputRepresentation=r(this._inputRepresentation),this._hoveredPoints=r(this._hoveredPoints)}_updateInputRepresentation(t,e){e===m.Selected?this._inputRepresentation.update(t):this._inputRepresentation.remove()}}export{j as ElevationProfileView2D};
