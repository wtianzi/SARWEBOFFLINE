/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import"./tslib.es6.js";import"./ArrayPool.js";import"../core/lang.js";import"./deprecate.js";import"./object.js";import"../config.js";import"./Logger.js";import"./string.js";import"./metadata.js";import"../core/accessorSupport/decorators/property.js";import"../core/Accessor.js";import"./PropertyOrigin.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"./Message.js";import"../core/Error.js";import"./ensureType.js";import"../core/accessorSupport/decorators/subclass.js";import"./JSONSupport.js";import"../core/urlUtils.js";import"../core/accessorSupport/decorators/cast.js";import"./jsonMap.js";import"./reader.js";import"./writer.js";import"./resourceExtension.js";import"../geometry/SpatialReference.js";import"../geometry/Geometry.js";import"../geometry/Point.js";import"./Ellipsoid.js";import"../geometry/support/webMercatorUtils.js";import r from"../geometry/Extent.js";import"./mathUtils2.js";import"./colorUtils.js";import"../Color.js";import"./zmUtils.js";import"../geometry/Multipoint.js";import"../geometry/Polygon.js";import"./extentUtils.js";import"../geometry/Polyline.js";import"./typeUtils.js";import"../geometry/support/jsonUtils.js";import"../geometry.js";import"./colorUtils2.js";import"./colorRampUtils.js";import o from"../layers/support/PixelBlock.js";import"./_commonjsHelpers.js";import"../layers/support/RasterInfo.js";import{d as s,R as t}from"./RasterSymbolizer.js";import"./LercCodec.js";import{f as e,g as i,m,j as p}from"./pixelUtils.js";export default class{async decode(r){const o=await s(r.data,r.options);return o&&o.toJSON()}symbolize(s){s.pixelBlock=o.fromJSON(s.pixelBlock),s.extent=s.extent?r.fromJSON(s.extent):null;const t=this.symbolizer.symbolize(s);return Promise.resolve(t&&t.toJSON())}async updateSymbolizer(r){var o;this.symbolizer=t.fromJSON(r.symbolizerJSON),r.histograms&&"rasterStretch"===(null==(o=this.symbolizer)?void 0:o.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=r.histograms)}stretch(r){const s=this.symbolizer.simpleStretch(o.fromJSON(r.srcPixelBlock),r.stretchParams);return Promise.resolve(s&&s.toJSON())}estimateStatisticsHistograms(r){const s=e(o.fromJSON(r.srcPixelBlock));return Promise.resolve(s)}split(r){const s=i(o.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel);return s&&s.forEach(((r,o)=>{s.set(o,null==r?void 0:r.toJSON())})),Promise.resolve(s)}async mosaicAndTransform(r){const s=r.srcPixelBlocks.map((r=>r?new o(r):null)),t=m(s,r.srcMosaicSize);if(!r.coefs)return t&&t.toJSON();const e=p(t,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation);return e&&e.toJSON()}}
