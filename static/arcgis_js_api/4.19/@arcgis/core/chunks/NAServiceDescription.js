/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import"../core/lang.js";import{g as r}from"./object.js";import{i as t}from"./Logger.js";import"../core/accessorSupport/decorators/property.js";import s from"../core/Error.js";import"./ensureType.js";import{subclass as o}from"../core/accessorSupport/decorators/subclass.js";import{urlToObject as a}from"../core/urlUtils.js";import"./resourceExtension.js";import i from"../request.js";import n from"../tasks/Task.js";const l=n=>{let l=class extends n{async getServiceDescription(e){return this._serviceDescriptionPromise||(this._serviceDescriptionPromise=this._fetchServiceDescription(e)),this._serviceDescriptionPromise}async _fetchServiceDescription(e){if(!this.url||!this.parsedUrl)throw new s("network-service:missing-url","Url to Network service is missing");const t=this.url,{data:o}=await i(t,{query:{f:"json",token:e}});o.supportedTravelModes||(o.supportedTravelModes=[]);for(let e=0;e<o.supportedTravelModes.length;e++)o.supportedTravelModes[e].id||(o.supportedTravelModes[e].id=o.supportedTravelModes[e].itemId);const n=o.currentVersion>=10.4?async function(e,r){try{const{data:{supportedTravelModes:t,defaultTravelMode:s}}=await i(e+("/"===e[e.length-1]?"":"/")+"retrieveTravelModes",{query:{f:"json",token:r}});return{supportedTravelModes:t,defaultTravelMode:s}}catch(e){throw new s("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:e})}}(t,e):async function(e,t){const{data:s}=await i(e.substring(0,e.indexOf("/rest/")+6)+"info",{query:{f:"json",token:t}});if(!s||!s.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};e=s.owningSystemUrl;const{data:o}=await i(e+("/"===e[e.length-1]?"":"/")+"sharing/rest/portals/self",{query:{f:"json",token:t}}),n=r("helperServices.routingUtilities.url",o);if(!n)return{supportedTravelModes:[],defaultTravelMode:null};const l=a(e),d=/\/solveClosestFacility$/.test(l.path)?"Route":/\/solveClosestFacility$/.test(l.path)?"ClosestFacility":"ServiceAreas",u=await i(n+("/"===n[n.length-1]?"":"/")+"GetTravelModes/execute",{query:{f:"json",serviceName:d,token:t}}),c=[];let p=null;if(u&&u.data&&u.data.results&&u.data.results.length){const e=u.data.results;for(const r of e)if("supportedTravelModes"===r.paramName){if(r.value&&r.value.features)for(const{attributes:e}of r.value.features)if(e){const r=JSON.parse(e.TravelMode);c.push(r)}}else"defaultTravelMode"===r.paramName&&(p=r.value)}return{supportedTravelModes:c,defaultTravelMode:p}}(t,e),{defaultTravelMode:l,supportedTravelModes:d}=await n;return o.defaultTravelMode=l,o.supportedTravelModes=d,o}_isInputGeometryZAware(e,r){for(let s=0;s<r.length;s++){const o=e[r[s]];if(o&&o.length)for(const e of o)if(t(e)&&e.hasZ)return!0}return!1}_dropZValuesOffInputGeometry(e,r){for(let t=0;t<r.length;t++){const s=e[r[t]];if(s&&s.length)for(const e of s)e.z=void 0}console.log("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")}};return l=e([o("esri.tasks.mixins.NAServiceDescription")],l),l};let d=class extends(l(n)){};d=e([o("esri.tasks.mixins.NAServiceDescription")],d);export{l as N};
