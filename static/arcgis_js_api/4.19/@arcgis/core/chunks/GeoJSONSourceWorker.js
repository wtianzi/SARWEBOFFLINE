/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import"./tslib.es6.js";import"./ArrayPool.js";import"../core/lang.js";import"./deprecate.js";import"./object.js";import"../kernel.js";import"../config.js";import"./Logger.js";import"./string.js";import"./metadata.js";import"../core/accessorSupport/decorators/property.js";import"../core/Accessor.js";import"./PropertyOrigin.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"./Message.js";import e from"../core/Error.js";import"./ensureType.js";import"../core/accessorSupport/decorators/subclass.js";import"./Evented.js";import"./JSONSupport.js";import"../core/urlUtils.js";import"../core/accessorSupport/decorators/cast.js";import"./jsonMap.js";import"./enumeration.js";import"./reader.js";import"./writer.js";import"./resourceExtension.js";import{W as t,e as s}from"../geometry/SpatialReference.js";import i from"../request.js";import"./assets.js";import"../geometry/Geometry.js";import"../geometry/Point.js";import"./Ellipsoid.js";import"../geometry/support/webMercatorUtils.js";import"../geometry/Extent.js";import"./mathUtils2.js";import"./vec3f64.js";import"./common.js";import"./vec3.js";import"./zmUtils.js";import"../geometry/Multipoint.js";import"../geometry/Polygon.js";import"./extentUtils.js";import"../geometry/Polyline.js";import"./typeUtils.js";import{getJsonType as r}from"../geometry/support/jsonUtils.js";import"../geometry.js";import"../layers/support/CodedValueDomain.js";import"../layers/support/Domain.js";import"../layers/support/InheritedDomain.js";import"../layers/support/RangeDomain.js";import"./domains.js";import"./arcadeOnDemand.js";import{getFieldDefaultValue as o}from"../layers/support/fieldUtils.js";import"./unitUtils.js";import"./normalizeUtilsCommon.js";import"../geometry/support/normalizeUtils.js";import"./MemCache.js";import"./ItemCache.js";import"../core/watchUtils.js";import{k as n}from"./fieldType.js";import"./mat4.js";import"./pe.js";import"./aaBoundingRect.js";import"./geodesicConstants.js";import"../geometry/support/GeographicTransformationStep.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/projection.js";import"./Scheduler.js";import"../core/sql/WhereClause.js";import"./_commonjsHelpers.js";import"./defaultsJSON.js";import a from"../layers/support/FieldsIndex.js";import"./QueryEngineCapabilities.js";import"./OptimizedFeatureSet.js";import{b as p,c as l,l as u,m,n as d}from"./featureConversionUtils.js";import"./aaBoundingBox.js";import{v as c,i as y,c as j}from"./geojson.js";import{c as f,a as g,b as h}from"./clientSideDefaults.js";import"./quantizationUtils.js";import"./json.js";import{p as b,c as F}from"./projectionSupport.js";import"./centroid.js";import"./quickselect.js";import"./PooledRBush.js";import{F as I}from"./FeatureStore.js";import"./optimizedFeatureQueryEngineAdapter.js";import{Q as _}from"./QueryEngine.js";import"./spatialQuerySupport.js";import{l as E,m as T,c as q,a as x,s as w}from"./sourceUtils.js";const S={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};export default class{constructor(){this._queryEngine=null}destroy(){this._queryEngine&&this._queryEngine&&this._queryEngine.destroy(),this._queryEngine=this._requiredFields=this._fieldsIndex=this._createDefaultAttributes=null}async load(r){const u=[];await this._checkProjection(r.spatialReference);let m=null;if(r.url){m=(await i(r.url,{responseType:"json"})).data,await c(m)}const d=y(m,{geometryType:r.geometryType}),F=r.fields||d.fields||[],E=null!=r.hasZ?r.hasZ:d.hasZ,T=d.geometryType,q=r.objectIdField||("number"===d.objectIdFieldType?d.objectIdFieldName:"OBJECTID")||"OBJECTID",x=r.spatialReference||t;let w=r.timeInfo;if(!T)throw new e("geojson-layer:missing-property","geometryType not set and couldn't be inferred from the provided features");if("string"===d.objectIdFieldType&&u.push({name:"geojson-layer:unsupported-id-type",message:"Feature ids are of type string and can't be honored."}),F===d.fields&&d.unknownFields.length>0&&u.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:d.unknownFields}}),q){let e=null;F.some((t=>t.name===q&&(e=t,!0)))?(e.type="esriFieldTypeOID",e.editable=!1,e.nullable=!1):F.unshift({alias:q,name:q,type:"esriFieldTypeOID",editable:!1,nullable:!1})}for(const t of F){if(null==t.name&&(t.name=t.alias),null==t.alias&&(t.alias=t.name),!t.name)throw new e("geojson-layer:invalid-field-name","field name is missing",{field:t});if(t.name===q&&(t.type="esriFieldTypeOID"),-1===n.jsonValues.indexOf(t.type))throw new e("geojson-layer:invalid-field-type",`invalid type for field "${t.name}"`,{field:t})}const D={};this._requiredFields=[];for(const e of F)if("esriFieldTypeOID"!==e.type&&"esriFieldTypeGlobalID"!==e.type){e.editable=null==e.editable||!!e.editable,e.nullable=null==e.nullable||!!e.nullable;const t=o(e);e.nullable||void 0!==t?D[e.name]=t:this._requiredFields.push(e)}if(this._fieldsIndex=new a(F),w){if(w.startTimeField){const e=this._fieldsIndex.get(w.startTimeField);e?(w.startTimeField=e.name,e.type="esriFieldTypeDate"):w.startTimeField=null}if(w.endTimeField){const e=this._fieldsIndex.get(w.endTimeField);e?(w.endTimeField=e.name,e.type="esriFieldTypeDate"):w.endTimeField=null}if(w.trackIdField){const e=this._fieldsIndex.get(w.trackIdField);e?w.trackIdField=e.name:(w.trackIdField=null,u.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:w}}))}w.startTimeField||w.endTimeField||(u.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:w}}),w=null)}const R={warnings:u,featureErrors:[],layerDefinition:{...S,drawingInfo:f(T),templates:g(D),extent:null,geometryType:T,objectIdField:q,fields:F,hasZ:!!E,timeInfo:w}};this._queryEngine=new _({fields:F,geometryType:T,hasM:!1,hasZ:E,objectIdField:q,spatialReference:x,timeInfo:w,featureStore:new I({geometryType:T,hasM:!1,hasZ:E}),cacheSpatialQueries:!0}),this._createDefaultAttributes=h(D,q),this._nextObjectId=d.maxObjectId+1;const O=j(m,{geometryType:T,hasZ:E,objectIdFieldName:"number"===d.objectIdFieldType?q:null});if(!s(x,t))for(const e of O)e.geometry&&(e.geometry=p(b(l(e.geometry,T,E,!1),t,x)));return this._loadInitialFeatures(R,O),R}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([E(t,s),F(e.adds,t),F(e.updates,t)]),this._applyEdits(e)}queryFeatures(e={},t={}){return this._queryEngine.executeQuery(e,t.signal)}queryFeatureCount(e={},t={}){return this._queryEngine.executeQueryForCount(e,t.signal)}queryObjectIds(e={},t={}){return this._queryEngine.executeQueryForIds(e,t.signal)}queryExtent(e={},t={}){return this._queryEngine.executeQueryForExtent(e,t.signal)}querySnapping(e,t={}){return this._queryEngine.executeQueryForSnapping(e,t.signal)}_loadInitialFeatures(e,t){const{featureStore:s,objectIdField:i}=this._queryEngine,r=[];for(const s of t){const t=this._createDefaultAttributes(),o=T(this._fieldsIndex,this._requiredFields,t,s.attributes,!0,e.warnings);o?e.featureErrors.push(o):(this._assignObjectId(t,s.attributes,!0),s.attributes=t,s.objectId=t[i],r.push(s))}if(s.addMany(r),e.layerDefinition.extent=this._queryEngine.fullExtent,e.layerDefinition.timeInfo){const{start:t,end:s}=this._queryEngine.timeExtent;e.layerDefinition.timeInfo.timeExtent=[t,s]}return e}_applyEdits(e){const{adds:t,updates:s,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(r,t),s&&s.length&&this._applyUpdateEdits(r,s),i&&i.length){for(const e of i)r.deleteResults.push(q(e));this._queryEngine.featureStore.removeManyById(i)}return{fullExtent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:i,hasM:o,hasZ:n,objectIdField:a,spatialReference:p,featureStore:l}=this._queryEngine,m=[];for(const o of t){if(o.geometry&&i!==r(o.geometry)){s.push(x("Incorrect geometry type."));continue}const t=this._createDefaultAttributes(),n=T(this._fieldsIndex,this._requiredFields,t,o.attributes);if(n)s.push(n);else{if(this._assignObjectId(t,o.attributes),o.attributes=t,null!=o.uid){const t=o.attributes[a];e.uidToObjectId[o.uid]=t}o.geometry&&(o.geometry=b(w(o.geometry,p),o.geometry.spatialReference,p)),m.push(o),s.push(q(o.attributes[a]))}}l.addMany(u([],m,i,n,o,a))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:i,hasZ:o,objectIdField:n,spatialReference:a,featureStore:p}=this._queryEngine;for(const l of t){const{attributes:t,geometry:u}=l,c=t&&t[n];if(null==c){e.push(x(`Identifier field ${n} missing`));continue}if(!p.has(c)){e.push(x(`Feature with object id ${c} missing`));continue}const y=m(p.getFeature(c),s,o,i);if(u){if(s!==r(u)){e.push(x("Incorrect geometry type."));continue}y.geometry=b(w(u,a),u.spatialReference,a)}if(t){const s=T(this._fieldsIndex,this._requiredFields,y.attributes,t);if(s){e.push(s);continue}}p.add(d(y,s,o,i,n)),e.push(q(c))}}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;s&&isFinite(t[i])?e[i]=t[i]:e[i]=this._nextObjectId++}async _checkProjection(s){try{await F(t,s)}catch{throw new e("geojson-layer","Projection not supported")}}}
