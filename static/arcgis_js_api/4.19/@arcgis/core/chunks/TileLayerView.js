/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import"../core/lang.js";import{i as r}from"./Logger.js";import{property as t}from"../core/accessorSupport/decorators/property.js";import{eachAlways as o}from"../core/promiseUtils.js";import s from"../core/Error.js";import"./ensureType.js";import{subclass as a}from"../core/accessorSupport/decorators/subclass.js";import"../core/urlUtils.js";import"./resourceExtension.js";import{c as i}from"./drapedUtils.js";const p=p=>{let l=class extends p{async fetchPopupFeatures(e,t){const{layer:a}=this;if(!e)return Promise.reject(new s("tilelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:a}));if("tile"!==a.type)return Promise.reject(new s("tilelayerview:fetchPopupFeatures","Layer type should be 'tile'",{type:a.type}));const p=this.get("view.scale"),l=a.allSublayers.toArray().filter((e=>{const r=0===e.minScale||p<=e.minScale,t=0===e.maxScale||p>=e.maxScale;return e.popupTemplate&&e.popupEnabled&&e.visible&&r&&t}));return o(l.map((async o=>{const s=o.createQuery(),a=r(t)?t.event:null,p=i({renderer:o.renderer,event:a});s.geometry=this.createFetchPopupFeaturesQueryGeometry(e,p),s.outFields=await o.popupTemplate.getRequiredFields();return(await o.queryFeatures(s)).features}))).then((e=>[].concat(...e.map((e=>e.value)).filter(Boolean))))}};return e([t()],l.prototype,"layer",void 0),l=e([a("esri.layers.mixins.TileLayerView")],l),l};export{p as T};
