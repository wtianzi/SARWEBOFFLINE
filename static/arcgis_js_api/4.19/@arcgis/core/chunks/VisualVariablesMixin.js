/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as r}from"./tslib.es6.js";import"../core/lang.js";import{L as a}from"./Logger.js";import{property as s}from"../core/accessorSupport/decorators/property.js";import e from"../core/Accessor.js";import"./ensureType.js";import{subclass as i,W as t}from"../core/accessorSupport/decorators/subclass.js";import"../core/urlUtils.js";import{J as o}from"./jsonMap.js";import{r as l}from"./reader.js";import{w as n}from"./writer.js";import"./resourceExtension.js";import{collectField as u,collectArcadeFieldNames as p}from"../layers/support/fieldUtils.js";import V from"../renderers/visualVariables/VisualVariable.js";import c from"../renderers/visualVariables/ColorVariable.js";import b from"../renderers/visualVariables/OpacityVariable.js";import h from"../renderers/visualVariables/RotationVariable.js";import y from"../renderers/visualVariables/SizeVariable.js";const f=a.getLogger("esri.renderers.visualVariables.VisualVariableFactory"),v={color:c,size:y,opacity:b,rotation:h},m=new o({colorInfo:"color",transparencyInfo:"opacity",rotationInfo:"rotation",sizeInfo:"size"}),d=/^\[([^\]]+)\]$/i;let g=class extends e{constructor(){super(...arguments),this.colorVariables=null,this.opacityVariables=null,this.rotationVariables=null,this.sizeVariables=null}set visualVariables(r){if(this._resetVariables(),(r=r&&r.filter((r=>!!r)))&&r.length){for(const a of r)switch(a.type){case"color":this.colorVariables.push(a);break;case"opacity":this.opacityVariables.push(a);break;case"rotation":this.rotationVariables.push(a);break;case"size":this.sizeVariables.push(a)}if(this.sizeVariables.length){this.sizeVariables.some((r=>!!r.target))&&r.sort(((r,a)=>{let s=null;return s=r.target===a.target?0:r.target?1:-1,s}))}for(let a=0;a<r.length;a++){r[a].index=a}this._set("visualVariables",r)}else this._set("visualVariables",r)}readVariables(r,a,s){const{rotationExpression:e,rotationType:i}=a,o=e&&e.match(d),l=o&&o[1];if(l&&(r||(r=[]),r.push({type:"rotationInfo",rotationType:i,field:l})),r)return r.map((r=>{const a=m.read(r.type),e=v[a];e||(f.warn(`Unknown variable type: ${a}`),s&&s.messages&&s.messages.push(new t("visual-variable:unsupported",`visualVariable of type '${a}' is not supported`,{definition:r,context:s})));const i=new e;return i.read(r,s),i}))}writeVariables(r,a){const s=[];for(const e of r){const r=e.toJSON(a);r&&s.push(r)}return s}_resetVariables(){this.colorVariables=[],this.opacityVariables=[],this.rotationVariables=[],this.sizeVariables=[]}};r([s()],g.prototype,"visualVariables",null),g=r([i("esri.renderers.visualVariables.VisualVariableFactory")],g);var j=g;const F={base:V,key:"type",typeMap:{opacity:b,color:c,rotation:h,size:y}},w=a=>{let e=class extends a{constructor(){super(...arguments),this._vvFactory=new j}set visualVariables(r){this._vvFactory.visualVariables=r,this._set("visualVariables",this._vvFactory.visualVariables)}readVisualVariables(r,a,s){return this._vvFactory.readVariables(r,a,s)}writeVisualVariables(r,a,s,e){a[s]=this._vvFactory.writeVariables(r,e)}get arcadeRequiredForVisualVariables(){if(!this.visualVariables)return!1;for(const r of this.visualVariables)if(r.arcadeRequired)return!0;return!1}hasVisualVariables(r,a){return r?!!this.getVisualVariablesForType(r,a):!!(this.getVisualVariablesForType("size",a)||this.getVisualVariablesForType("color",a)||this.getVisualVariablesForType("opacity",a)||this.getVisualVariablesForType("rotation",a))}getVisualVariablesForType(r,a){const s=this.visualVariables;if(!s)return;const e=s.filter((s=>s.type===r&&("string"==typeof a?s.target===a:!1!==a||!s.target)));return e&&0===e.length?void 0:e}async collectVVRequiredFields(r,a){let s=[];this.visualVariables&&(s=s.concat(this.visualVariables));for(const e of s)e&&(e.field&&u(r,a,e.field),e.normalizationField&&u(r,a,e.normalizationField),e.valueExpression&&await p(r,a,e.valueExpression))}};return r([s({types:[F],value:null,json:{write:!0}})],e.prototype,"visualVariables",null),r([l("visualVariables",["visualVariables","rotationType","rotationExpression"])],e.prototype,"readVisualVariables",null),r([n("visualVariables")],e.prototype,"writeVisualVariables",null),e=r([i("esri.renderers.mixins.VisualVariablesMixin")],e),e};export{w as V};
