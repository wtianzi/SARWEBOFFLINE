/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import"../core/lang.js";import{i as s,b as t}from"./Logger.js";import{property as o}from"../core/accessorSupport/decorators/property.js";import l from"../core/Accessor.js";import"./ensureType.js";import{subclass as r}from"../core/accessorSupport/decorators/subclass.js";import"../core/urlUtils.js";import"./resourceExtension.js";import{h as i}from"./mathUtils2.js";import a from"../Color.js";import n from"../symbols/TextSymbol3DLayer.js";import h from"../symbols/PointSymbol3D.js";import p from"../symbols/SimpleFillSymbol.js";import m from"../symbols/TextSymbol.js";import y from"../Graphic.js";const c=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let b=class extends l{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=c.map((e=>new p({color:[e[0],e[1],e[2],.6],outline:{color:"black",width:1}}))),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=this.getTiles(),o=new Array,l=new Set((this._labels.size,this._labels.keys()));e.forEach(((r,p)=>{const c=r.lij.toString();l.delete(c);const b=r.lij[0],g=r.geometry;if(this.enablePolygons&&!this._polygons.has(c)){const e=new y({geometry:g,symbol:this._symbols[b%this._symbols.length]});this._polygons.set(c,e),o.push(e)}if(this.enableLabels){const l=(e=>{if(s(e.label))return e.label;let t=e.lij.toString();return s(e.loadPriority)&&(t+=` (${e.loadPriority})`),t})(r),b=p/(e.length-1),d=i(0,200,b),u=i(20,6,b)/.75,_=s(r.loadPriority)&&r.loadPriority>=e.length,f=new a([d,_?0:d,_?0:d]),w="3d"===this.view.type?()=>new h({verticalOffset:{screenLength:40/.75},callout:{type:"line",color:"white",border:{color:"black"}},symbolLayers:[new n({text:l,halo:{color:"white",size:1/.75},material:{color:f},size:u})]}):()=>new m({text:l,haloColor:"white",haloSize:1/.75,color:f,size:u});if(this._labels.has(c)){const e=this._labels.get(c),s=w();(t(e.symbol)||JSON.stringify(s)!==JSON.stringify(e.symbol))&&(e.symbol=s)}else{const e=new y({geometry:g.extent.center,symbol:w()});this._labels.set(c,e),o.push(e)}}}));const r=new Array;l.forEach((e=>{this._polygons.has(e)&&(r.push(this._polygons.get(e)),this._polygons.delete(e)),this._labels.has(e)&&(r.push(this._labels.get(e)),this._labels.delete(e))})),this.view.graphics.removeMany(r),this.view.graphics.addMany(o)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};e([o({constructOnly:!0})],b.prototype,"view",void 0),e([o({readOnly:!0})],b.prototype,"updating",void 0),e([o()],b.prototype,"enabled",null),b=e([r("esri.views.support.TileTreeDebugger")],b);export{b as T};
