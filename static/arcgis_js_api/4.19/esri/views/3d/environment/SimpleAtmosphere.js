// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define("../../../chunks/_rollupPluginBabelHelpers ../../../core/Logger ../../../core/promiseUtils ../../../geometry/support/spatialReferenceUtils ../../../core/mathUtils ../../../chunks/vec3f64 ../../../chunks/vec3 ../support/mathUtils ../../../geometry/projectionEllipsoid ../../../core/watchUtils ../../../chunks/mat4 ../../../chunks/mat4f64 ../../../chunks/vec2f64 ../../../chunks/vec2 ../../../support/requestImageUtils ../webgl-engine/lib/DefaultVertexAttributeLocations ./SimpleAtmosphereTechnique ./resources/SimpleAtmosphereTexture ../support/buffer/glUtil ../support/buffer/InterleavedLayout ../webgl-engine/lib/Util ../../webgl/BufferObject ../../webgl/Texture ../../webgl/Util ../../webgl/VertexArrayObject ./atmosphereUtils ./resources/MarsAtmosphereTexture ../webgl-engine/lib/glUtil3D".split(" "),
function(C,p,q,D,v,m,h,E,F,G,H,I,J,K,L,M,r,N,O,P,w,Q,R,x,S,y,T,U){function z(l,k,b,c,a){const g=h.length(l),d=c*Math.sqrt(g*g-c*c)/g,f=a.silCircleV1,e=a.silCircleV2;h.scale(a.silCircleCenter,l,Math.sqrt(c*c-d*d)/g);h.cross(f,l,k);1>h.squaredLength(f)&&h.cross(f,l,b);h.scale(f,f,d/h.length(f));h.cross(e,f,l);h.scale(e,e,d/h.length(e));return d}const V=p.getLogger("esri.views.3d.environment.SimpleAtmosphere"),A=-y.INNER_ATMOSPHERE_DEPTH,W=E.makePiecewiseLinearFunction([[50,.1015625],[500,.21875],[5E3,
.51171875],[5E4,.4140625]]);p=function(){function l(b){this.slot=14;this._renderData={texV:J.create(),silCircleCenter:m.create(),silCircleV1:m.create(),silCircleV2:m.create(),altitudeFade:0,innerScale:0,undergroundFadeAlpha:0};this._fadeVaoCount=0;this._readyResolver=q.createResolver();this._readyController=q.createAbortController();this.texV1=1;this.isOnMars=D.isMars(b.spatialReference);const c=F.getReferenceEllipsoid(b.spatialReference);this.planetRadius=c.radius;this.outerRimWidth=c.outerAtmosphereRimWidth;
this.innerRimFactor=(this.planetRadius+A)/this.planetRadius;this.middleRimFactor=(this.planetRadius+0)/this.planetRadius;this.outerRimFactor=(this.planetRadius+this.outerRimWidth)/this.planetRadius;this.texV0=0/this.outerRimWidth;this.texVScale=this.texV1-this.texV0;this._atmosphereTechniqueConfig=new r.SimpleAtmosphereTechniqueConfiguration;this.view=b}var k=l.prototype;k.when=function(){return this._readyResolver.promise};k.initializeRenderContext=function(b){const c=b.renderContext.rctx;this._cameraChangeHandle=
G.init(this.view,"state.camera",()=>b.requestRender(),!0);this._atmosphereTechniqueConfig.geometry=0;this._atmosphereConeTechnique=b.shaderTechniqueRep.acquireAndReleaseExisting(r.SimpleAtmosphereTechnique,this._atmosphereTechniqueConfig,this._atmosphereConeTechnique);this._atmosphereTechniqueConfig.geometry=2;this._atmosphereUndergroundTechnique=b.shaderTechniqueRep.acquireAndReleaseExisting(r.SimpleAtmosphereTechnique,this._atmosphereTechniqueConfig,this._atmosphereUndergroundTechnique);this._vao=
this._createRibbon(c);this._vaoCount=x.vertexCount(this._vao,"geometry");this._fadeVao=U.createQuadVAO(c);this._fadeVaoCount=x.vertexCount(this._fadeVao,"geometry");L.requestImage(this.isOnMars?T:N,{signal:this._readyController.signal}).then(a=>{this._texture=new R(c,{pixelFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,flipped:!0},a);b.requestRender();this._readyController=null;this._readyResolver.resolve()}).catch(a=>{q.isAbortError(a)||V.error("Unable to initialize simple atmosphere: image request failed",
a);this._readyResolver.reject()})};k.uninitializeRenderContext=function(){this.destroy()};k.destroy=function(){this._readyResolver.reject();this._cameraChangeHandle&&(this._cameraChangeHandle.remove(),this._cameraChangeHandle=null);this._texture&&(this._texture.dispose(),this._texture=null);this._fadeVao&&(this._fadeVao.dispose(),this._fadeVao=null);this._vao&&(this._vao.dispose(),this._vao=null);this._readyController&&(this._readyController.abort(),this._readyController=null)};k.render=function(b){if(b.slot!==
this.slot||0!==b.pass)return!1;this._update(b.camera);const c=b.rctx;this._atmosphereConeTechnique.bindPipelineState(c);if(1>this._renderData.undergroundFadeAlpha){var a=this._atmosphereConeTechnique.program;c.bindProgram(a);a.setUniformMatrix4fv("proj",b.camera.projectionMatrix);a.setUniformMatrix4fv("view",b.camera.viewMatrix);a.setUniform3fv("silCircleCenter",this._renderData.silCircleCenter);a.setUniform3fv("silCircleV1",this._renderData.silCircleV1);a.setUniform3fv("silCircleV2",this._renderData.silCircleV2);
a.setUniform2fv("texV",this._renderData.texV);c.bindTexture(this._texture,0);a.setUniform1i("tex",0);b.scenelightingData.setLightDirectionUniform(a);a.setUniform1f("altitudeFade",this._renderData.altitudeFade);a.setUniform1f("innerScale",this._renderData.innerScale);c.bindVAO(this._vao);c.drawArrays(4,0,this._vaoCount)}0<this._renderData.undergroundFadeAlpha&&(a=this._atmosphereUndergroundTechnique.program,c.bindProgram(a),a.setUniform1f("undergroundFadeAlpha",this._renderData.undergroundFadeAlpha),
b.scenelightingData.setLightDirectionUniform(a),a.setUniform3fv("cameraPosition",b.camera.eye),c.bindVAO(this._fadeVao),c.drawArrays(5,0,this._fadeVaoCount));return!0};k._update=function(b){var c=m.create();const a=this.planetRadius;var g=h.length(b.eye);const d=g-a;this._renderData.undergroundFadeAlpha=0>d?Math.min(-d/5E3,1):0;var f=a+A,e=a+Math.max(50,d);this._renderData.innerScale=e*e/(Math.sqrt(e*e-a*a)*Math.sqrt(e*e-f*f)+a*f)-1;this._renderData.altitudeFade=y.computeInnerAltitudeFade(d);h.scale(c,
b.eye,(a+50)/g);z(c,b.center,b.up,a,this._renderData);c=this._computeScreenRimWidth(b,c,b.up,this._renderData);g=W(d);f=this.texV0+.001953125*this.texVScale;e=this.texV0+c*g*this.texVScale;50<d&&(z(b.eye,b.center,b.up,a,this._renderData),b=this._computeScreenRimWidth(b,b.eye,b.up,this._renderData),b=v.clamp((b-1.5)/(c-1.5),0,1),f=this.texV0+.001953125*b*this.texVScale,e=this.texV0+v.lerp(this.texV1,c*g,b)*this.texVScale);K.set(this._renderData.texV,f,e)};k._createRibbon=function(b){const c=new Float32Array(1155),
a=new Uint32Array(1920);c[0]=0;c[1]=0;c[2]=-1;for(var g=0;128>g;g++){var d=9*g+3;c[d+0]=g;c[d+1]=this.innerRimFactor;c[d+2]=-1;c[d+3]=g;c[d+4]=this.middleRimFactor;c[d+5]=0;c[d+6]=g;c[d+7]=this.outerRimFactor;c[d+8]=1;d=3*g+1;var f=127===g?1:d+3,e=15*g;a[e+0]=d;a[e+1]=d+1;a[e+2]=f+1;a[e+3]=f+1;a[e+4]=f;a[e+5]=d;a[e+6]=d+1;a[e+7]=d+2;a[e+8]=f+2;a[e+9]=f+2;a[e+10]=f+1;a[e+11]=d+1;a[e+12]=d;a[e+13]=f;a[e+14]=0}g=B.createBuffer(a.length);d=g.position;for(f=0;f<a.length;++f)e=3*a[f],d.set(f,0,c[e]),d.set(f,
1,c[e+1]),d.set(f,2,c[e+2]);return new S(b,M.Default3D,{geometry:O.glLayout(B)},{geometry:Q.createVertex(b,35044,g.buffer)})};k._computeScreenRimWidth=function(b,c,a,g){h.add(n,g.silCircleCenter,g.silCircleV2);h.scale(t,n,this.outerRimFactor);H.lookAt(u,c,n,a);w.project(n,u,b.projectionMatrix,b.viewport);w.project(t,u,b.projectionMatrix,b.viewport);return h.distance(n,t)/b.height};C._createClass(l,[{key:"canRender",get:function(){return null!=this._texture}}]);return l}();const u=I.create(),n=m.create(),
t=m.create(),B=P.newLayout().vec3f("position");return p});