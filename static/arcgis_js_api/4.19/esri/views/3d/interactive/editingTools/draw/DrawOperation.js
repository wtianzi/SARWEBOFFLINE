// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/_rollupPluginBabelHelpers ../../../../../chunks/tslib.es6 ../../../../../core/has ../../../../../core/lang ../../../../../core/maybe ../../../../../core/Logger ../../../../../core/accessorSupport/ensureType ../../../../../core/accessorSupport/decorators/property ../../../../../core/jsonMap ../../../../../core/accessorSupport/decorators/subclass ../../../../../core/urlUtils ../../../../../core/uuid ../../../../../portal/support/resourceExtension ../../../../../core/promiseUtils ../../../../../geometry/Point ../../../../../geometry ../../../../../core/Evented ../../../../../core/screenUtils ../../../../../core/Handles ../../../../support/Scheduler ../../../../../layers/graphics/dehydratedFeatureComparison ../../../../interactive/coordinateHelper ../../../../interactive/editGeometry/EditGeometry ../../../../interactive/editGeometry/EditGeometryHelper ../../../../interactive/snapping/SnappingContext ../../../../interactive/dragEventPipeline ../../SnappingDragPipelineStep ../../SnappingVisualizer3D ./DrawManipulator ../../../../draw/DrawingMode".split(" "),
function(m,r,z,N,A,d,O,P,Q,R,B,S,T,U,C,D,V,E,F,G,t,H,I,u,J,v,q,K,w,L,M){m.DrawOperation=function(x){function n(b){var c,f;var a=x.call(this)||this;a._manipulator=null;a._stagedVertex=null;a.geometryType=null;a.elevationInfo=null;a.snapToSceneEnabled=null;a._handles=new G;a._defaultZ=0;a._elevationDrawSurface=null;a._snappingDrawSurface=null;a._snappingManager=null;a._snappingPipeline=new K.SnappingPipeline;a._createOperationCompleted=!1;a._pointerDownStates=new Set;a._snappingTask=null;a.view=b.view;
a.drawingMode=d.unwrapOr(b.drawingMode,M.defaultDrawingMode);a.geometryType=b.geometryType;a.elevationInfo=b.elevationInfo;a.coordinateHelper=I.createCoordinateHelper(b.hasZ,b.hasM,a.view.spatialReference,a.view.viewingMode);a._defaultZ=b.defaultZ;a.snapToSceneEnabled=b.snapToSceneEnabled;a._snappingDrawSurface=d.unwrap(b.snappingDrawSurface);a._snappingManager=b.snappingManager;const l=null==(c=b.view)?void 0:null==(f=c.resourceController)?void 0:f.scheduler;a._frameTask=l?l.registerTask(t.Task.SNAPPING,
e=>a._frameTask.processQueue(e),()=>!1):t.ImmediateTask;a._elevationDrawSurface=b.elevationDrawSurface;a._editGeometry=new J.EditGeometryHelper(new u.EditGeometry(a.coordinateHelper),"segment"===a.geometryType?"polyline":a.geometryType);a._activeComponent=new u.Component(a._editGeometry.editGeometry);a._editGeometry.editGeometry.components.push(a._activeComponent);a._editGeometry.on(["vertex-add","vertex-update","vertex-remove"],e=>{const g=e.vertices.map(p=>({componentIndex:0,vertexIndex:p.index,
coordinates:a.coordinateHelper.toArray(p.pos)})),k=g.map(p=>p.coordinates);switch(e.type){case "vertex-add":a.emit(e.type,{...e,added:k,vertices:g});break;case "vertex-update":a.emit(e.type,{...e,updated:k,vertices:g});break;case "vertex-remove":a.emit(e.type,{...e,removed:k,vertices:g})}});a._manipulator=new L.DrawManipulator({grabbableForEvent:e=>"click"!==a.drawingMode?!0:"touch"===e.pointerType&&a._snappingEnabled&&1===a._pointerDownStates.size});b.manipulators.add(a._manipulator);a._manipulator.grabbable=
"point"!==a.geometryType;b=a.createManipulatorDragPipeline(a._manipulator);c=a._manipulator.events.on("immediate-double-click",e=>{a._manipulator.dragging||"point"===a.geometryType||(a.complete(),e.stopPropagation())});f=a._manipulator.events.on("immediate-click",e=>{if(!a._manipulator.dragging){var g=a._activeComponent,k=a._closeOnClickVertexIndex(e.screenPoint);if(d.isSome(k))a.discardStagedVertex(),a.complete();else if(k=a._screenToMap(e.screenPoint),d.isSome(k))switch(a.drawingMode){case "click":case "hybrid":a._snappingTask=
d.abortMaybe(a._snappingTask),a.hasStagedVertex?a.commitStagedVertex():a._editGeometry.appendVertex(a.coordinateHelper.fromPoint(k)),("point"===a.geometryType||"segment"===a.geometryType&&2===g.vertices.length||"segment"===a.geometryType&&"hybrid"===a.drawingMode&&1===g.vertices.length)&&a.complete()}e.stopPropagation()}});a._handles.add([b,f,c]);return a}r._inheritsLoose(n,x);var h=n.prototype;h.createManipulatorDragPipeline=function(b){switch(this.drawingMode){case "click":return this.createManipulatorDragPipelineClick(b);
case "freehand":return this.createManipulatorDragPipelineFreehand(b);case "hybrid":return this.createManipulatorDragPipelineHybrid(b)}};h.createManipulatorDragPipelineClick=function(b){return q.createManipulatorDragEventPipeline(b,(c,f,a,l)=>{const e="touch"===l&&this._snappingEnabled;!this.isCompleted&&e&&(f.next(this._screenToMapDragEventStep()).next(g=>{"start"===g.action&&(this.stagedVertex=g.mapStart,("segment"===this.geometryType||e&&0===this.vertices.length)&&this.commitStagedVertex());return g}).next(this._snappingPipeline.createSnapDragEventPipelineStep({predicate:()=>
e,cancel:a,snappingManager:this._snappingManager,snappingContext:new v.SnappingContext({geometry:this._editGeometry,elevationInfo:this.elevationInfo,pointer:l,visualizer:new w.SnappingVisualizer3D})}),this._snappingPipeline.next).next(g=>{e&&(this.stagedVertex=g.mapEnd,"end"===g.action&&this.commitStagedVertex());return g}).next(g=>{"end"!==g.action||"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete();return g}),a.next(()=>{e&&d.isSome(this._snappingManager)&&this._snappingManager.doneSnapping()}))})};
h.createManipulatorDragPipelineFreehand=function(b){return q.createManipulatorDragEventPipeline(b,(c,f)=>{this.isCompleted||f.next(this._screenToMapDragEventStep()).next(a=>{"start"===a.action&&(this.stagedVertex=a.mapStart,"segment"===this.geometryType&&this.commitStagedVertex());return a}).next(a=>{switch(a.action){case "start":case "update":this.stagedVertex=a.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case "end":this.complete()}return a})})};
h.createManipulatorDragPipelineHybrid=function(b){return q.createManipulatorDragEventPipeline(b,(c,f)=>{this.isCompleted||f.next(this._screenToMapDragEventStep()).next(a=>{"start"===a.action&&(this.stagedVertex=a.mapStart,this.commitStagedVertex());return a}).next(a=>{switch(a.action){case "start":case "update":this.stagedVertex=a.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case "end":"segment"!==this.geometryType&&"point"!==this.geometryType||
this.complete()}return a})})};h.destroy=function(){this._handles.destroy();this._handles=null;this._editGeometry.destroy();this._frameTask.remove()};h.onInputEvent=function(b){switch(b.type){case "pointer-down":this._pointerDownStates.add(b.pointerId);break;case "pointer-up":this._pointerDownStates.delete(b.pointerId)}switch(b.type){case "pointer-move":return this._onPointerMove(b);case "hold":return this._onHold(b)}};h.redo=function(){this._editGeometry.redo()};h.undo=function(){d.isSome(this._snappingManager)&&
this._snappingManager.doneSnapping();this._editGeometry.undo()};h.complete=function(b=!1){d.abortMaybe(this._snappingTask);this.commitStagedVertex();this._createOperationCompleted=!0;d.isSome(this._snappingManager)&&this._snappingManager.doneSnapping();this.emit("complete",{vertices:this.vertices.map((c,f)=>({componentIndex:0,vertexIndex:f,coordinates:c})),aborted:b,type:"complete"})};h.cancel=function(){this.complete(!0)};h.commitStagedVertex=function(){this._snappingTask=d.abortMaybe(this._snappingTask);
if(d.isSome(this._stagedVertex)){const b=this._stagedVertex;this._stagedVertex=null;this._editGeometry.appendVertex(this.coordinateHelper.fromPoint(b))}};h.discardStagedVertex=function(){this._stagedVertex=null};h._onPointerMove=function(b){d.abortMaybe(this._snappingTask);if(!(this._manipulator.dragging||this._pointerDownStates.has(b.pointerId)||this._manipulator.grabbing)&&this._manipulator.interactive){var c=F.createScreenPoint(b.x,b.y),f=this._closeOnClickVertexIndex(c);if(d.isSome(f))this.discardStagedVertex(),
c={componentIndex:0,vertexIndex:f,coordinates:this.coordinateHelper.toArray(this._activeComponent.vertices[f].pos)},this.emit("cursor-update",{updated:null,vertices:[c],operation:"apply",type:"vertex-update"});else{const a=this._screenToMap(c);this._manipulator.cursor=d.isSome(a)?"crosshair":null;if(d.isSome(a))if(d.isSome(this._snappingManager)){const l=this._snappingManager,e=new v.SnappingContext({geometry:this._editGeometry,elevationInfo:this.elevationInfo,pointer:b.pointerType,visualizer:new w.SnappingVisualizer3D});
this.stagedVertex=l.update(a,e);this._snappingTask=C.createTask(async g=>{const k=await this._frameTask.schedule(()=>l.snap(a,e,g),g);k.valid&&await this._frameTask.schedule(()=>{this.stagedVertex=k.apply()},g)})}else this.stagedVertex=a}b.stopPropagation()}};h._onHold=function(b){d.abortMaybe(this._snappingTask);"click"===this.drawingMode&&"touch"===b.pointerType&&this._snappingEnabled&&(this.stagedVertex=b.mapPoint);b.stopPropagation()};h._screenToMapDragEventStep=function(){let b=null;return c=>
{"start"===c.action&&(b=this._screenToMap(c.screenStart));if(d.isNone(b))return null;const f=this._screenToMap(c.screenEnd);return d.isSome(f)?{...c,mapStart:b,mapEnd:f}:null}};h._screenToMap=function(b){return this._getDrawSurface().screenToMap(b)};h._mapToScreen=function(b){return this._getDrawSurface().mapToScreen(b)};h._getDrawSurface=function(){var b=null;if(this.coordinateHelper.hasZ){b=this._defaultZ;let c=!1;d.isSome(this.elevationInfo)&&"absolute-height"===this.elevationInfo.mode&&(c=!0);
d.isSome(this.snapToSceneEnabled)&&(c=this.snapToSceneEnabled);d.isSome(this.elevationInfo)&&"on-the-ground"===this.elevationInfo.mode&&(c=!1);const f=this._activeComponent.vertices.length;("segment"===this.geometryType||"polygon"===this.geometryType)&&0<f&&(b=this.coordinateHelper.getZ(this._activeComponent.vertices[0].pos),c=!1);c?b=this._snappingDrawSurface:(this._elevationDrawSurface.defaultZ=b,b=this._elevationDrawSurface)}else this._elevationDrawSurface.defaultZ=null,b=this._elevationDrawSurface;
return b};h._vertexWithinPointerDistance=function(b,c){const f=this._mapToScreen(b);d.isSome(f)?(b=f.x-c.x,c=f.y-c.y,c=25>=b*b+c*c):c=!1;return c};h._closeOnClickVertexIndex=function(b){const c=this._activeComponent;if("polygon"===this.geometryType&&2<c.vertices.length){if(this._vertexWithinPointerDistance(this.coordinateHelper.toPoint(c.vertices[0].pos,y),b))return 0;if(this._vertexWithinPointerDistance(this.coordinateHelper.toPoint(c.vertices[c.vertices.length-1].pos,y),b))return c.vertices.length-
1}return null};r._createClass(n,[{key:"isCompleted",get:function(){return this._createOperationCompleted}},{key:"_snappingEnabled",get:function(){return d.isSome(this._snappingManager)&&this._snappingManager.options.effectiveEnabled}},{key:"canRedo",get:function(){return this._editGeometry.canRedo}},{key:"canUndo",get:function(){return this._editGeometry.canUndo}},{key:"interactive",get:function(){return this._manipulator.interactive},set:function(b){this._manipulator.interactive=b}},{key:"numVertices",
get:function(){return d.isSome(this._stagedVertex)?this._activeComponent.vertices.length+1:this._activeComponent.vertices.length}},{key:"numCommittedVertices",get:function(){return this._activeComponent.vertices.length}},{key:"vertices",get:function(){const b=this._activeComponent.vertices.map(c=>this.coordinateHelper.toArray(c.pos));d.isSome(this._stagedVertex)&&b.push(this.coordinateHelper.pointToArray(this._stagedVertex));return b}},{key:"spatialReference",get:function(){return this.view.spatialReference}},
{key:"hasStagedVertex",get:function(){return d.isSome(this._stagedVertex)}},{key:"stagedVertex",get:function(){return this._stagedVertex},set:function(b){d.isNone(b)?this.discardStagedVertex():d.isSome(this._stagedVertex)&&H.pointEquals(this._stagedVertex,b)||(d.isNone(this._stagedVertex)?this._stagedVertex=A.clone(b):(this._stagedVertex.x=b.x,this._stagedVertex.y=b.y,this._stagedVertex.z=b.z,this._stagedVertex.m=b.m,this._stagedVertex.hasZ=b.hasZ,this._stagedVertex.hasM=b.hasM,this._stagedVertex.spatialReference=
b.spatialReference),b={componentIndex:0,vertexIndex:this._activeComponent.vertices.length,coordinates:this.coordinateHelper.pointToArray(b)},this.emit("cursor-update",{updated:null,vertices:[b],operation:"apply",type:"vertex-update"}))}}]);return n}(E);m.DrawOperation=z.__decorate([B.subclass("esri.views.3d.interactive.editingTools.draw3D.DrawOperation")],m.DrawOperation);const y=new D({x:0,y:0,z:0});Object.defineProperty(m,"__esModule",{value:!0})});