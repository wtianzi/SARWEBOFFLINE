// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define("../../../../../chunks/_rollupPluginBabelHelpers ../../../../../core/maybe ../../../../../core/screenUtils ../../../../../chunks/vec3f64 ../../../../../chunks/vec3 ../../../../../core/Handles ../../../../../chunks/mat4 ../../../../../chunks/mat4f64 ../../../webgl-engine/lib/GeometryUtil ../../../webgl-engine/lib/Intersector ../../../webgl-engine/materials/lineStippleUtils ../../visualElements/LaserlineVisualElement ../../../../interactive/ManipulatorCollection ../../editingTools/dragEventPipeline3D ../../manipulatorUtils ../support/viewUtils ../../visualElements/LabelVisualElement ../../visualElements/LineVisualElement ../../visualElements/MeasurementAreaVisualElement ../../visualElements/support/Segment".split(" "),
function(C,f,D,k,v,E,w,F,G,H,I,J,K,L,x,q,r,l,M,m){const N={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,
projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,labelDistance:25};let u=function(){function h(a,b=new K.ManipulatorCollection,c={}){this._model=a;this._manipulators=b;this.vertexManipulators=[];this._visible=!1;this._cursorManipulator=this._perimeterLengthLabel=this._cursorSegmentLengthLabel=this._pathLengthLabel=this._areaLabel=this._measurementArea=this._laserLine=this._projectionLines=this._intersectedPerimeter=this._perimeter=
this._intersectedPath=this._path=null;this._pathSegments=[];this._perimeterSegments=[];this._listenerHandles=this._cursorSegment=null;this._origin=k.create();this._originTransform=F.create();this._tempHandlePosition=k.create();this._cursorPositionRenderSpace=k.create();this._view=this._model.sceneView;this._params=q.copyParameter(N,c);this._intersector=new H.Intersector(this._view.state.mode);this._intersector.options.store=0;a=x.createSphereManipulator(this._view,this._params.handleColor,this._params.handleOpacity);
a.available=!1;a.radius=this._params.handleRadius;a.interactive=!1;this._manipulators.add(a);this._cursorManipulator=a;this._path=new l.LineVisualElement({view:this._view,attached:!0,width:this._params.pathLineWidth,color:this._params.pathLineColor,polygonOffset:!0,renderOccluded:4});this._intersectedPath=new l.LineVisualElement({view:this._view,attached:!0,width:this._params.pathLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4});this._perimeter=new l.LineVisualElement({view:this._view,
attached:!0,width:this._params.perimeterLineWidth,color:this._params.perimeterLineColor,polygonOffset:!0,renderOccluded:4});this._intersectedPerimeter=new l.LineVisualElement({view:this._view,attached:!0,width:this._params.perimeterLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4});this._projectionLines=new l.LineVisualElement({view:this._view,attached:!0,width:this._params.projectionLineWidth,color:this._params.projectionLineColor,stipplePattern:I.createStipplePatternSimple(this._params.projectionLineStippleSize),
stippleIntegerRepeats:!1,polygonOffset:!0,renderOccluded:4});this._laserLine=new J.LaserlineVisualElement({view:this._view,attached:!0,style:{glowColor:this._params.laserLineGlowColor,glowWidth:this._params.laserLineGlowWidth,glowFalloff:this._params.laserLineGlowFalloff,innerColor:this._params.laserLineInnerColor,innerWidth:this._params.laserLineInnerWidth,globalAlpha:this._params.laserLineGlobalAlpha}});this._measurementArea=new M.MeasurementAreaVisualElement({view:this._view,attached:!0,color1:this._params.areaColor1,
color2:this._params.areaColor2});this._areaLabel=new r.LabelVisualElement({view:this._view,attached:!0,fontSize:16});this._pathLengthLabel=new r.LabelVisualElement({view:this._view,attached:!0,fontSize:12});this._cursorSegmentLengthLabel=new r.LabelVisualElement({view:this._view,attached:!0,fontSize:12});this._perimeterLengthLabel=new r.LabelVisualElement({view:this._view,attached:!0,fontSize:12})}var d=h.prototype;d.destroy=function(){this.hide();this._laserLine.destroy();this._laserLine=null;this._measurementArea.destroy();
this._measurementArea=null;this._path.destroy();this._path=null;this._intersectedPath.destroy();this._intersectedPath=null;this._perimeter.destroy();this._perimeter=null;this._intersectedPerimeter.destroy();this._intersectedPerimeter=null;this._areaLabel.destroy();this._areaLabel=null;this._pathLengthLabel.destroy();this._pathLengthLabel=null;this._cursorSegmentLengthLabel.destroy();this._cursorSegmentLengthLabel=null;this._perimeterLengthLabel.destroy();this._perimeterLengthLabel=null};d.show=function(){this._visible||
(this._visible=!0,this._path.visible=!0,this._intersectedPath.visible=!0,this._perimeter.visible=!0,this._intersectedPerimeter.visible=!0,this._projectionLines.visible=!0,this._laserLine.visible=!0,this._measurementArea.visible=!0,this._areaLabel.visible=!0,this._pathLengthLabel.visible=!0,this._cursorSegmentLengthLabel.visible=!0,this._perimeterLengthLabel.visible=!0,this._initializeListeners(),this._updateAll(this._model.viewData))};d.hide=function(){this._visible&&(this._visible=!1,this._path.visible=
!1,this._intersectedPath.visible=!1,this._perimeter.visible=!1,this._projectionLines.visible=!1,this._intersectedPerimeter.visible=!1,this._laserLine.visible=!1,this._measurementArea.visible=!1,this._areaLabel.visible=!1,this._pathLengthLabel.visible=!1,this._cursorSegmentLengthLabel.visible=!1,this._perimeterLengthLabel.visible=!1,this._destroyListeners(),this.vertexManipulators.forEach(a=>{this._removeVertexManipulator(a.manipulator)}),this.vertexManipulators=[],this._view.cursor=null)};d.vertexHandleAt=
function(a,b){a=this._manipulators.intersect(a,b);return f.isSome(a)?a.manipulator.metadata:null};d.manipulatorToVertex=function(a){return a.metadata};d.pick=function(a){var b=this._view.spatialReference;a=D.screenPointObjectToArray(a.screenPoint);this._view.sceneIntersectionHelper.intersectToolIntersectorScreen(a,this._intersector);a=this._intersector.results.min;const c=k.create();if(!a.getIntersectionPoint(c))return new h.PickResult;b=this._view.renderCoordsHelper.fromRenderCoords(c,b);return f.isNone(b)?
new h.PickResult:new h.PickResult("TerrainRenderer"===a.intersector?"surface":"feature",c,b)};d.overlappingHandles=function(a,b){return q.pointToPointScreenDistance(a,b,this._view)<=this._params.handleRadius};d.screenToMap3D=function(){return L.screenToMap3D(this._view)};d._updateOrigin=function(a){q.midpoint(a.positionsRenderCoords,this._origin);w.identity(this._originTransform);w.translate(this._originTransform,this._originTransform,this._origin);this._measurementArea.transform=this._originTransform;
this._projectionLines.transform=this._originTransform};d._updateAll=function(a){this._visible&&(this._updateOrigin(a),this._updatePathSegments(a),this._updatePerimeterSegments(a),this._updateVertexManipulators(a),this._updateArea(a),this._updateProjectionLines(a),this._updateLabels(a),this._updateLaserLine())};d._createSegments=function(a,b){const c=a.path,e=this._view.renderCoordsHelper.spatialReference,g=this._model.measurementMode,t=[],y=[],z=[],O=a.validMeasurement?c.numVertices:c.numVertices-
1;for(let n=0;n<O;++n){const A=a[b][n],B=a[b][(n+1)%c.numVertices];let p=null;switch(g){case "euclidean":p=new m.EuclideanSegment(A,B);break;case "geodesic":p=new m.GeodesicSegment(A,B,e)}a.intersectingSegments.has(n)?z.push(p):y.push(p);t.push(p)}return{all:t,nonIntersecting:y,intersecting:z}};d._updatePathSegments=function(a){const b=this._createSegments(a,"positionsRenderCoords");var c=a.path,e=this._view.renderCoordsHelper;const g=e.spatialReference,t=this._model.measurementMode;this._cursorSegment=
null;if(0<c.numVertices&&"drawing"===this._model.state&&f.isSome(this._model.cursorPoint)&&e.toRenderCoords(this._model.cursorPoint,this._cursorPositionRenderSpace)){a=a.positionsRenderCoords[c.numVertices-1];c=this._cursorPositionRenderSpace;e=null;switch(t){case "euclidean":e=new m.EuclideanSegment(a,c);break;case "geodesic":e=new m.GeodesicSegment(a,c,g)}b.nonIntersecting.push(e);this._cursorSegment=e}this._path.setGeometryFromSegments(b.nonIntersecting,this._origin);this._intersectedPath.setGeometryFromSegments(b.intersecting,
this._origin);this._pathSegments=b.all};d._updatePerimeterSegments=function(a){a=this._createSegments(a,"positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(a.nonIntersecting,this._origin);this._intersectedPerimeter.setGeometryFromSegments(a.intersecting,this._origin);this._perimeterSegments=a.all};d._createVertexManipulator=function(){const a=x.createSphereManipulator(this._view,this._params.handleColor,this._params.handleOpacity);a.radius=this._params.handleRadius;return{id:this._manipulators.add(a),
manipulator:a}};d._removeVertexManipulator=function(a){this._manipulators.remove(a)};d._updateVertexManipulators=function(a){const b=this._model.path.vertices,c=this.vertexManipulators;q.resizeArray(c,b.length,()=>this._createVertexManipulator(),e=>this._removeVertexManipulator(e.manipulator));c.forEach((e,g)=>{e.manipulator.metadata=b[g];e.manipulator.renderLocation=a.positionsRenderCoords[g]});"drawing"===this._model.state&&f.isSome(this._model.cursorPoint)?(this._cursorManipulator.available=!0,
this._cursorManipulator.location=this._model.cursorPoint):this._cursorManipulator.available=!1};d._updateArea=function(a){switch(this._model.measurementMode){case "euclidean":this._updateAreaEuclidean(a);break;case "geodesic":this._updateAreaGeodesic()}};d._updateAreaEuclidean=function(a){a.validMeasurement&&0===a.intersectingSegments.size&&a.triangleIndices?(this._measurementArea.geometry={uv:a.positionsProjected,position:a.positionsFittedRenderCoords,triangleIndices:a.triangleIndices},this._measurementArea.size=
[a.checkerSize,a.checkerSize],this._measurementArea.visible=!0,this._perimeter.visible=!0,this._projectionLines.visible=!0):(this._measurementArea.visible=!1,this._perimeter.visible=!1,this._projectionLines.visible=!1)};d._updateAreaGeodesic=function(){this._measurementArea.visible=!1;this._perimeter.visible=!1;this._projectionLines.visible=!1};d._updateProjectionLines=function(a){const b=a.path;if(0<b.numVertices&&a.validMeasurement&&"euclidean"===this._model.measurementMode){a=[];for(let c=0;c<
b.numVertices;++c){const e=k.create();v.subtract(e,this._model.viewData.positionsRenderCoords[c],this._origin);const g=k.create();v.subtract(g,this._model.viewData.positionsFittedRenderCoords[c],this._origin);a.push([e,g])}this._projectionLines.geometry=a}else this._projectionLines.geometry=null};d._updateLabels=function(a){if(this._visible){var b=this._model,c=this._view,e="drawing"===b.state;this._areaLabel.geometry=c.renderCoordsHelper.fromRenderCoords(a.areaCentroid,c.spatialReference);this._areaLabel.text=
b.areaLabel;this._areaLabel.visible=a.validMeasurement&&0===a.intersectingSegments.size&&null!=b.areaLabel;0<=a.pathLengthLabelSegmentIndex&&a.pathLengthLabelSegmentIndex<this._pathSegments.length?(a=this._pathSegments[a.pathLengthLabelSegmentIndex],c=f.isSome(this._cursorSegment)?this._cursorSegment:P,this._pathLengthLabel.distance=this._params.labelDistance,this._pathLengthLabel.geometry={type:"corner",left:a,right:c},this._pathLengthLabel.text=b.pathLengthLabel,this._pathLengthLabel.visible=e&&
0<b.path.numVertices):this._pathLengthLabel.visible=!1;this._cursorSegmentLengthLabel.distance=this._params.labelDistance;this._cursorSegmentLengthLabel.geometry=f.isSome(this._cursorSegment)?{type:"segment",segment:this._cursorSegment,sampleLocation:"end"}:null;this._cursorSegmentLengthLabel.anchor="bottom";this._cursorSegmentLengthLabel.text=b.cursorSegmentLengthLabel;this._cursorSegmentLengthLabel.visible=e&&!!b.cursorSegmentLength&&0!==b.cursorSegmentLength.value;this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&
(this._cursorSegmentLengthLabel.visible=!1);this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1);this._updatePerimeterLabel(this._model.viewData)}};d._updatePerimeterLabel=function(a){var b=this._model;const c="geodesic"===b.measurementMode;if(b.validMeasurement&&0===a.intersectingSegments.size){this._perimeterLengthLabel.distance=this._params.labelDistance;this._perimeterLengthLabel.anchor="top";this._perimeterLengthLabel.text=b.perimeterLengthLabel;var e=this._perimeterLengthLabel.visible=
!0;for(b=0;b<a.path.numVertices;++b){e=(a.perimeterLengthLabelSegmentIndex+b)%a.path.numVertices;const g=c?this._pathSegments[e]:this._perimeterSegments[e];e=!0;this._perimeterLengthLabel.geometry={type:"segment",segment:g,sampleLocation:"center"};if(this._perimeterLengthLabel.overlaps(this._areaLabel))e=!1;else break}this._perimeterLengthLabel.visible=e}else this._perimeterLengthLabel.visible=!1};d._getFocusPoint=function(){const a=this._model,b=this._model.lastDraggedVertex;switch(a.state){case "drawing":return f.isSome(a.cursorPoint)?
a.cursorPoint:f.isSome(b)?a.path.getVertexPositionAsPoint(b):f.unwrap(a.path.lastPoint);case "editing":return f.isSome(b)?a.path.getVertexPositionAsPoint(b):null;default:return a.cursorPoint}};d._updateLaserLine=function(){var a=this._model,b=this._params.laserLineEnabled&&"measured"!==a.state&&a.active;a=this._getFocusPoint();b&&f.isSome(a)?(b=this._tempHandlePosition,this._view.renderCoordsHelper.toRenderCoords(a,b),this._laserLine.heightManifoldTarget=b):this._laserLine.heightManifoldTarget=null};
d._initializeListeners=function(){this._listenerHandles=new E;this._listenerHandles.add([this._model.watch(["state","lastDraggedVertex"],()=>this._updateLaserLine()),this._model.watch(["cursorPoint","unit","measurementMode","active","viewData"],()=>this._updateAll(this._model.viewData)),this._model.watch(["areaLabel","cursorSegmentLengthLabel","pathLengthLabel","perimeterLengthLabel"],()=>{this._updateAll(this._model.viewData)}),this._view.state.watch("camera",()=>this._updatePerimeterLabel(this._model.viewData))])};
d._destroyListeners=function(){this._listenerHandles.destroy();this._listenerHandles=null};C._createClass(h,[{key:"requiresCursorPoint",get:function(){return("initial"===this._model.state||"drawing"===this._model.state)&&this._model.active}},{key:"visible",get:function(){return this._visible},set:function(a){a?this.show():this.hide()}},{key:"testData",get:function(){const a=this._laserLine.testData;return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,
perimeterLength:this._perimeterLengthLabel},laserLineRenderer:f.isSome(a)?{heightManifoldEnabled:a.heightManifoldEnabled,heightManifoldTarget:a.heightManifoldTarget,pointDistanceEnabled:a.pointDistanceEnabled,pointDistanceOrigin:a.pointDistanceOrigin,pointDistanceTarget:a.pointDistanceTarget,lineVerticalPlaneEnabled:a.lineVerticalPlaneEnabled}:{heightManifoldEnabled:!1,heightManifoldTarget:null,pointDistanceEnabled:!1,pointDistanceOrigin:null,pointDistanceTarget:null,lineVerticalPlaneEnabled:!1}}}}]);
return h}();u._handleGeometry=G.createSphereGeometry(1,32,32);(function(h){h.PickRequest=function(){};h.PickResult=function(d=null,a=null,b=null){this.type=d;this.scenePoint=a;this.mapPoint=b}})(u||(u={}));const P=new m.EuclideanSegment(k.create(),k.create());return u});