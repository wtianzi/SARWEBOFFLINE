// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define("../../../../../chunks/_rollupPluginBabelHelpers ../../../../../chunks/tslib.es6 ../../../../../core/has ../../../../../core/maybe ../../../../../core/Logger ../../../../../core/accessorSupport/ensureType ../../../../../core/accessorSupport/decorators/property ../../../../../core/accessorSupport/decorators/aliasOf ../../../../../core/jsonMap ../../../../../core/accessorSupport/decorators/subclass ../../../../../core/urlUtils ../../../../../core/uuid ../../../../../portal/support/resourceExtension ../../../../../geometry/Point ../../../../../geometry ../../../../../core/Handles ../../../../../core/watchUtils ../../../../support/screenUtils ../../../../../layers/graphics/hydratedFeatures ../../../../interactive/dragEventPipeline ../../../../interactive/InteractiveToolBase ../../editingTools/dragEventPipeline3D ./DirectLineMeasurement3DModel ./DirectLineMeasurement3DView".split(" "),
function(t,e,d,A,L,M,h,n,N,B,O,P,Q,C,R,D,E,u,F,v,G,w,H,p){d=function(x){function m(a){var b=x.call(this,a)||this;b._handles=new D;b._cachedPickRequest=new p.DirectLineMeasurement3DView.PickRequest;b._cachedPickResult=new p.DirectLineMeasurement3DView.PickResult;b._isAnyPointerDown=!1;b.deferCreation=!0;b.startManipulator=null;b.endManipulator=null;b.model=new H({sceneView:a.view});return b}t._inheritsLoose(m,x);var c=m.prototype;c.initialize=function(){var a=new p.DirectLineMeasurement3DView({model:this.model});
this._set("directLineMeasurementView",a);a=E.init(this,"state",f=>{"ready"!==f&&this.create();"measured"===f&&this.complete()},!0);this._handles.add(a);const {start:b,end:g}=this.directLineMeasurementView.createManipulators();a=(f,k,y)=>v.createManipulatorDragEventPipeline(f,(q,I,J)=>{const z=w.hideManipulatorWhileDragging(q);I.next(z).next(w.screenToMap3D(this.view)).next(l=>"start"!==l.action?l:null).next(l=>{const r=F.clonePoint(l.mapEnd,K);this.model[k]=r;q.location=r;this.model[y]=this._surfaceLocation(r,
l.surfaceType)});J.next(z).next(v.resetProperties(this.model,[k,y])).next(()=>{q.location=A.unwrap(this.model[k])})});this._handles.add([a(b,"startPoint","startPointSurfaceLocation"),a(g,"endPoint","endPointSurfaceLocation")]);[b,g].forEach(f=>{this._handles.add([f.events.on("grab-changed",()=>{const k=b.grabbing||g.grabbing;k&&"measured"===this.model.state&&(this.model.state="editing");k||(this.model.finishMeasurement(),"editing"===this.model.state&&(this.model.state="measured"))})])});this.manipulators.add(b);
this.manipulators.add(g);this.startManipulator=b;this.endManipulator=g};c.destroy=function(){this.directLineMeasurementView.destroy();this._set("directLineMeasurementView",null);this.model.destroy();this._set("model",null);this._handles.destroy();this._handles=null};c.activate=function(){this.model.active=!0};c.deactivate=function(){this.model.active=!1};c.onDetach=function(){this.model.reset()};c.onShow=function(){this.directLineMeasurementView.show();this._updateManipulatorVisibility()};c.onHide=
function(){this.directLineMeasurementView.hide()};c.onInputEvent=function(a){switch(a.type){case "immediate-click":this._handleImmediateClick(a);break;case "pointer-move":this._handlePointerMove(a);break;case "pointer-down":this._handlePointerDown();break;case "pointer-up":this._handlePointerUp()}this._updateManipulatorVisibility()};c._handlePointerMove=function(a){this._clearCachedPickRequest();const b=u.createScreenPointFromEvent(a);"mouse"===a.pointerType&&(this._hoverAt(b),"drawing"===this.model.state&&
(this.endManipulator.events.emit("drag",{action:"update",start:b,screenPoint:b}),a.stopPropagation()))};c._handlePointerDown=function(){this._isAnyPointerDown=!0};c._handlePointerUp=function(){this._isAnyPointerDown=!1};c._handleImmediateClick=function(a){this._clearCachedPickRequest();if("mouse"!==a.pointerType||0===a.button){var b=u.createScreenPointFromEvent(a),g=a.pointerType,f=!1;if(this.model.active)switch(this.model.state){case "initial":this.startManipulator.events.emit("drag",{action:"start",
pointerType:g,start:b,screenPoint:b});this.startManipulator.events.emit("drag",{action:"end",start:b,screenPoint:b});this.model.startPoint&&(this.startManipulator.interactive=!1,this.endManipulator.interactive=!1,this.model.state="drawing",this.endManipulator.events.emit("drag",{action:"start",pointerType:g,start:b,screenPoint:b}),f=!0);break;case "drawing":this.endManipulator.events.emit("drag",{action:"update",start:b,screenPoint:b}),null!=this.model.endPoint&&(this.endManipulator.events.emit("drag",
{action:"end",start:b,screenPoint:b}),this.startManipulator.interactive=!0,this.endManipulator.interactive=!0,this.model.finishMeasurement(),f=!0)}f&&a.stopPropagation();"mouse"===a.pointerType&&this._hoverAt(b)}};c._hoverAt=function(a){const b=this._isAnyPointerDown&&"drawing"!==this.model.state&&"editing"!==this.model.state;this.directLineMeasurementView.requiresCursorPoint&&!b?(a=this._pick(a),a.mapPoint&&(this.model.cursorPoint=a.mapPoint)):this.model.cursorPoint=null};c._pick=function(a){const b=
this._cachedPickRequest.screenPoint;if(b&&b.x===a.x&&b.y===a.y)return this._cachedPickResult;this._cachedPickRequest.screenPoint=a;return this._cachedPickResult=this.directLineMeasurementView.pick(this._cachedPickRequest)};c._clearCachedPickRequest=function(){this._cachedPickRequest.screenPoint=null};c._surfaceLocation=function(a,b){return 0===b?"on-the-surface":a.z>=this.directLineMeasurementView.getElevation(a)?"above-the-surface":"below-the-surface"};c._updateManipulatorVisibility=function(){this.startManipulator.available=
null!=this.model.startPoint;this.endManipulator.available=null!=this.model.endPoint};t._createClass(m,[{key:"state",get:function(){var a;return null!=(a=this.model)&&a.isMeasuring?"measured"===this.model.state?"measured":"measuring":"ready"}},{key:"creating",get:function(){return"initial"===this.model.state||"drawing"===this.model.state}},{key:"isSupported",get:function(){return"3d"===this.get("view.type")}},{key:"cursor",get:function(){var a;return null==(a=this.model)||!a.active||"drawing"!==this.model.state&&
"initial"!==this.model.state?null:"crosshair"}}]);return m}(G.InteractiveToolBase);e.__decorate([h.property({readOnly:!0})],d.prototype,"state",null);e.__decorate([h.property({readOnly:!0})],d.prototype,"creating",null);e.__decorate([h.property({readOnly:!0})],d.prototype,"isSupported",null);e.__decorate([h.property({readOnly:!0})],d.prototype,"cursor",null);e.__decorate([h.property({constructOnly:!0})],d.prototype,"model",void 0);e.__decorate([h.property({constructOnly:!0})],d.prototype,"directLineMeasurementView",
void 0);e.__decorate([n.aliasOf("model.mode")],d.prototype,"mode",void 0);e.__decorate([n.aliasOf("model.unit")],d.prototype,"unit",void 0);e.__decorate([n.aliasOf("model.validMeasurement")],d.prototype,"validMeasurement",void 0);d=e.__decorate([B.subclass("esri.views.3d.interactive.measurementTools.directLineMeasurement3D.DirectLineMeasurement3DTool")],d);const K=new C;return d});