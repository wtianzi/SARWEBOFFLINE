// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define("exports ../../../../core/maybe ../../../../core/PooledArray ../../../../core/screenUtils ../../../../chunks/vec3f64 ../../../../chunks/vec3 ../../support/stack ../../../../chunks/ray ../../webgl-engine/lib/intersectorUtils ../../webgl-engine/lib/Intersector".split(" "),function(E,m,I,w,J,q,n,z,F,x){function G(l,g,a){for(const b of l)g&&!g(b)||a.push(b);return a}function H(l){A||(A=new x.Intersector(l));A.viewingMode=l;return A}let K=function(){function l(a,b,c){this.viewingMode=a;this.layerProvider=
b;this.view=c;this.externalIntersectionHandlers=new I;this.tolerance=x.Intersector.DEFAULT_TOLERANCE;this.tmpRay=z.create();this.validateHUDIntersector=new x.Intersector(this.viewingMode);this.validateHUDIntersector.options.hud=!1}var g=l.prototype;g.intersectScreen=function(a,b){return this.intersectRay(this.getPickRay(a,this.tmpRay),H(this.viewingMode),b)};g.intersectScreenFreePointFallback=function(a,b){return this.intersectRayFreePointFallback(this.getPickRay(a,this.tmpRay),b)};g.intersectRayFreePointFallback=
function(a,b){return this.intersectRay(a,H(this.viewingMode),b)||this.intersectRayFreePointLocal(a,b)};g.intersectRay=function(a,b,c,d){b.options.selectionMode=!1;b.options.store=0;this.computeIntersection(a,b,d);return b.results.min?b.results.min.getIntersectionPoint(c):!1};g.getCenterRayWithSubpixelOffset=function(a,b,c=.5,d=.5){a.getRenderCenter(v,c,d);v[0]+=.0466;v[1]-=.0123;return z.fromRenderAtEye(a,v,b)};g.intersectIntersectorScreen=function(a,b,c){this.computeIntersection(this.getPickRay(a,
this.tmpRay),b,c)};g.intersectToolIntersectorScreen=function(a,b,c){a=this.getPickRay(a,this.tmpRay);this.intersectToolIntersectorRay(a,b,c)};g.intersectToolIntersectorRay=function(a,b,c){b.options.selectionMode=!0;this.computeIntersection(a,b,c);const d=b.results.min;this.view.basemapTerrain&&this.view.basemapTerrain.opaque||d.hasIntersectionPoint&&"TerrainRenderer"!==d.intersector||(b.options.selectionMode=!1,this.computeIntersection(a,b,c))};g.setTolerance=function(a=x.Intersector.DEFAULT_TOLERANCE){this.tolerance=
a};g.addIntersectionHandler=function(a){this.externalIntersectionHandlers.push(a);this.externalIntersectionHandlers.sort((b,c)=>"Terrain"===b.type?1:"Terrain"===c.type?-1:0)};g.removeIntersectionHandler=function(a){this.externalIntersectionHandlers.removeUnordered(a);this.externalIntersectionHandlers.sort((b,c)=>"Terrain"===b.type?1:"Terrain"===c.type?-1:0)};g.getPickRay=function(a,b=z.create()){return z.fromScreen(this.view.state.camera,a,b)};g.intersectRayFreePointLocal=function(a,b){if(2!==this.viewingMode||
m.isNone(a))return!1;var c=this.view.dataExtent,d=Math.max(c.xmax-c.xmin,c.ymax-c.ymin,8*Math.max(c.xmax-c.xmin,c.ymax-c.ymin));if(0===d)return q.add(b,a.origin,q.normalize(n.sv3d.get(),a.direction)),!0;var e=this.view.state.camera;const k=Math.max(0,c.xmin-e.eye[0],e.eye[0]-c.xmax);c=Math.max(0,c.ymin-e.eye[1],e.eye[1]-c.ymax);e=d/Math.max(1,Math.max(0,Math.log(d/(Math.abs(e.relativeElevation)+Number.MIN_VALUE)))**2);e=Math.max(e,Math.min(Math.sqrt(k*k+c*c),d));d=q.scale(n.sv3d.get(),a.direction,
e/q.length(a.direction));q.add(b,a.origin,d);return!0};g.intersectElevationFromScreen=function(a,b,c=0,d=null){return this.intersectElevation(this.getPickRay(a,this.tmpRay),b,c,d)};g.intersectElevation=function(a,b,c=0,d=null){if(m.isNone(a))return null;var e=m.isSome(b)?b.mode:"absolute-height",k=m.isSome(b)?m.unwrapOr(b.offset,0):0,t="on-the-ground"!==e?k+c:0;b=t/this.view.renderCoordsHelper.unitInMeters;if("absolute-height"===e)return this.view.renderCoordsHelper.intersectManifold(a,t,B)?(c=this.view.computeMapPointFromVec3d(B),
c.z-=k,c):null;k=this.view.state.camera;const r=w.castRenderScreenPointArray3(n.sv3d.get());k.projectToRenderScreen(a.origin,r);t=this.prepareFilters(null,y);const u=this.view.slicePlane,C=m.isSome(u)?F.sliceFilterPredicate(u):null,f=new x.Intersector(this.viewingMode);f.options.store=0;f.options.verticalOffset=b;b=a.origin;a=q.add(n.sv3d.get(),b,a.direction);f.reset(b,a);f.point=r;f.camera=k;f.filterPredicate=null;const p=m.isSome(d)?"type"in d&&"graphics"===d.type?h=>h.metadata.layerUid!==d.uid:
h=>h.metadata.graphicUid!==d.uid:null;switch(e){case "relative-to-scene":f.intersect(t.layers,r,k,this.tolerance,null,h=>(m.isNone(p)||p(h))&&h.metadata&&h.metadata.isElevationSource);this.externalIntersectionHandlers.forAll(h=>{"I3S"!==h.type&&"Terrain"!==h.type||h.intersect(f,h.slicePlane?C:null,f.rayBeginPoint,f.rayEndPoint,r)});break;case "on-the-ground":case "relative-to-ground":this.externalIntersectionHandlers.forAll(h=>{h.isGround&&h.intersect(f,h.slicePlane?C:null,f.rayBeginPoint,f.rayEndPoint,
r)})}return f.results.min.getIntersectionPoint(B)?(e=this.view.computeMapPointFromVec3d(B),e.z=c,e):null};g.computeIntersection=function(a,b,c){if(!m.isNone(a)){var d=this.view.state.camera,e=w.castRenderScreenPointArray3(n.sv3d.get());d.projectToRenderScreen(a.origin,e);var k=this.prepareFilters(c,y);b.options.selectOpaqueTerrainOnly=!c||!("include"in c||"exclude"in c);var t=a.origin,r=q.add(n.sv3d.get(),a.origin,a.direction);b.reset(t,r);b.intersect(k.layers,e,d,this.tolerance);a=this.view.slicePlane;
var u=m.isSome(a)?F.sliceFilterPredicate(a):null;b.intersect(k.sliceableLayers,e,d,this.tolerance,u);var C=c&&(c.requiresGroundFeedback||c.enableDraped);this.externalIntersectionHandlers.forAll(f=>{b.options.isFiltered=!k.filterLayerUid(f.intersectionHandlerId);(f.isGround&&C||!b.options.isFiltered)&&f.intersect(b,f.slicePlane?u:null,t,r,e)});a=n.sv3d.get();if(c&&c.enableDraped&&b.results.ground.getIntersectionPoint(a)){c=this.view.basemapTerrain.overlayManager.renderer;const f=this.view.renderCoordsHelper.spatialReference,
p=n.sv3d.get();this.view.renderCoordsHelper.fromRenderCoords(a,p,this.view.spatialReference);p[2]=m.unwrapOr(this.view.elevationProvider.getElevation(a[0],a[1],a[2],f,"ground"),0);c.intersect(b,p,k.filterRenderGeometry)}b.sortResults();a=b.results.hud;if(a.hasIntersectionPoint){const f=w.castRenderScreenPointArray3(n.sv3d.get()),p=n.sv3d.get(),h=n.sv3d.get();this.unprojectHUDResultRay(a.center,f,p,h);c=q.distance(a.center,p)/q.distance(p,h)*.99;this.validateHUDIntersector.reset(p,h);this.validateHUDIntersector.intersect(k.layers,
f,d,this.tolerance);this.validateHUDIntersector.intersect(k.sliceableLayers,f,d,this.tolerance,u);this.externalIntersectionHandlers.forAll(D=>{k.filterLayerUid(D.intersectionHandlerId)&&D.intersect(this.validateHUDIntersector,D.slicePlane?u:null,p,h,f)});d=this.validateHUDIntersector.results.min;if(null==d.dist||c<=d.dist)b.results.min.copyFrom(a),b.results.all.splice(0,0,a)}}};g.prepareFilters=function(a,b){const c=[],d=[];this.layerProvider.forEachLayer(e=>{e.isPickable&&(e.isSliceable?d:c).push(e)});
b.include=a&&a.include;b.exclude=a&&a.exclude;b.layers.length=0;b.sliceableLayers.length=0;G(c,b.filterLayer,b.layers);G(d,b.filterLayer,b.sliceableLayers);return b};g.unprojectHUDResultRay=function(a,b,c,d){const e=this.view.state.camera;e.projectToRenderScreen(a,b);a=w.castRenderScreenPointArray3(n.sv3d.get());a[0]=b[0];a[1]=b[1];a[2]=0;e.unprojectFromRenderScreen(a,c);a[2]=1;e.unprojectFromRenderScreen(a,d)};return l}(),A;const y={include:null,exclude:null,layers:[],sliceableLayers:[],filterLayer(l){return y.filterLayerUid(l.apiLayerUid)},
filterLayerUid(l){const {include:g,exclude:a}=y;return m.isNone(l)?null==g&&null==a:(null==g||g.has(l))&&(null==a||!a.has(l))},filterRenderGeometry(l){return y.filterLayerUid(l.layerUid)}},B=J.create(),v=w.createRenderScreenPointArray();E.SceneIntersectionHelper=K;Object.defineProperty(E,"__esModule",{value:!0})});