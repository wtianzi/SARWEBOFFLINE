// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define("../../../../../chunks/_rollupPluginBabelHelpers ../../../../../chunks/tslib.es6 ../../../../../core/has ../../../../../core/maybe ../../../../../core/Logger ../../../../../core/accessorSupport/ensureType ../../../../../core/accessorSupport/decorators/property ../../../../../core/jsonMap ../../../../../core/accessorSupport/decorators/subclass ../../../../../core/urlUtils ../../../../../core/uuid ../../../../../portal/support/resourceExtension ../../../../../core/promiseUtils ../../../../../core/watchUtils ../../../../../layers/graphics/featureConversionUtils ../../../../../layers/support/FieldsIndex ../../../../../core/HandleOwner ../support/FeatureSetReaderJSON ../../../../support/QueueProcessor ../support/AttributeStore ../support/ComputedAttributeStorage ../FeatureStore2D ../../../../../layers/graphics/data/QueryEngine ../support/UpdateToken ../sources/createSource ../support/ClusterStore".split(" "),
function(u,h,x,p,f,L,l,M,y,N,O,P,g,t,z,A,B,C,D,E,F,G,H,I,J,K){function m(k){if(!g.isAbortError(k)&&"worker:port-closed"!==k.name)throw k;}function v(k){return"feature"===k.type&&"snapshot"===k.mode}f=function(k){function r(){var a=k.apply(this,arguments)||this;a._storage=new F.ComputedAttributeStorage;a._markedIdsBufId=a._storage.createBitset();a._lastCleanup=performance.now();a._cleanupNeeded=!1;a._invalidated=!1;a._tileToResolver=new Map;a.tileStore=null;a.config=null;a.processor=null;a.remoteClient=
null;a.service=null;return a}u._inheritsLoose(r,k);var c=r.prototype;c.initialize=function(){this._initAttributeStore();this._initStores();this._initQueryEngine();this._initSource();this._updateQueue=new D.QueueProcessor({concurrency:"geoevent"===this._source.type?1:4,process:(a,b)=>this._onTileMessage(a,{signal:b})});this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this)),this.watch("updating",a=>!a&&this.onIdle())]);this._checkUpdating=setInterval(()=>this.notifyChange("updating"),
300)};c.startup=async function(){this._initAttributeStore();this.tileStore.tiles.forEach(a=>this._source.subscribe(a))};c._initSource=function(){this._source=J.createSource(this.service,this.spatialReference,this.tileStore.tileScheme,(a,b)=>{this._invalidated=!0;return this._patchTile(a,b)},()=>50>this._updateQueue.length,this.featureStore);this._proxyEvents()};c._proxyEvents=function(){if("geoevent"===this._source.type){const a=this._source.events;this.handles.add([a.on("connectionStatus",b=>this.remoteClient.invoke("setProperty",
{propertyName:"connectionStatus",value:b}).catch(m)),a.on("errorString",b=>this.remoteClient.invoke("setProperty",{propertyName:"errorString",value:b}).catch(m)),a.on("feature",b=>this.remoteClient.invoke("emitEvent",{name:"data-received",event:{attributes:b.attributes,centroid:b.centroid,geometry:b.geometry}}).catch(m)),a.on("updateRate",b=>this.remoteClient.invoke("emitEvent",{name:"update-rate",event:{...b}}).catch(m))])}};c._initAttributeStore=function(){this.attributeStore?this.attributeStore.invalidateResources():
this.attributeStore=new E["default"]({type:"remote",initialize:(a,b)=>g.ignoreAbortErrors(this.remoteClient.invoke("tileRenderer.featuresView.attributeView.initialize",a,{signal:b}).catch(m)),update:(a,b)=>g.ignoreAbortErrors(this.remoteClient.invoke("tileRenderer.featuresView.attributeView.requestUpdate",a,{signal:b}).catch(m)),render:a=>g.ignoreAbortErrors(this.remoteClient.invoke("tileRenderer.featuresView.requestRender",void 0,{signal:a}).catch(m))},this.config)};c._initStores=function(){const a=
{geometryInfo:{geometryType:this.service.geometryType,hasM:!1,hasZ:!1},spatialReference:this.spatialReference,fieldsIndex:this.fieldsIndex,fields:this.service.fields};this.featureStore=new G.FeatureStore2D(a,this._storage,"snapshot"===this.service.type?"snapshot":"on-demand");this.aggregateStore=new K.ClusterStore(a,this.spatialReference,this._storage);this.handles.add(this.aggregateStore.events.on("valueRangesChanged",b=>{this.remoteClient.invoke("emitEvent",{name:"valueRangesChanged",event:{valueRanges:b.valueRanges}}).catch(m)}))};
c._initQueryEngine=function(){var a;const b=this;null==(a=this.queryEngine)?void 0:a.destroy();this.queryEngine=new H["default"]({definitionExpression:this.config.definitionExpression,fields:this.service.fields,geometryType:this.service.geometryType,objectIdField:this.service.objectIdField,hasM:!1,hasZ:!1,spatialReference:this.spatialReference.toJSON(),cacheSpatialQueries:!0,featureStore:this.featureStore,aggregateAdapter:{getFeatureObjectIds(d){return b.aggregateStore.getFeatureDisplayIdsForAggregate(d).map(e=>
b.getObjectId(e))}},timeInfo:this.service.timeInfo})};c.destroy=function(){this._updateQueue.destroy();this._source.destroy();this.queryEngine.destroy();this.attributeStore&&this.attributeStore.destroy();clearInterval(this._checkUpdating)};c.isUpdating=function(){return this._source.updating||!!this._updateQueue.length};c.enableEvent=function(a){this._source.enableEvent(a.name,a.value)};c.pause=function(){this._updateQueue.pause();this._updateQueue.clear()};c.update=async function(a,b){this._set("config",
b);this._schema=b.schema;this._initQueryEngine();await Promise.all([this._source.update(a,b.schema.source),this.featureStore.updateSchema(a,b.schema.targets.feature),this.attributeStore.update(a,b),this.attributeStore.updateFilters(a,this)]);await this.aggregateStore.updateSchema(a,b.schema.targets.aggregate);x("esri-2d-update-debug")&&a.describe()};c.applyUpdate=async function(a){a.mesh&&this.clearTiles();this._updateQueue.clear();this._updateQueue.resume();await this._source.applyUpdate(a);this.notifyChange("updating");
await t.whenFalseOnce(this,"updating",!0);this.hasAggregates&&(await g.after(10),await t.whenFalseOnce(this,"updating",!0))};c.onEdits=async function(a){try{const b=a.deletedFeatures.map(d=>({...d,objectId:d.objectId&&-1!==d.objectId?d.objectId:this._lookupObjectIdByGlobalId(d.globalId)}));this.featureStore.invalidate();await this._source.edit({...a,deletedFeatures:b})}catch(b){}};c.refresh=async function(){this.featureStore.invalidate();this.clearTiles();this._source.refresh();this._cleanupNeeded=
!0;this.notifyChange("updating");await t.whenFalseOnce(this,"updating",!0)};c.clearTiles=function(){for(const a of this.tileStore.tiles)this.processor.onTileClear(a)};c.onTileUpdate=function(a){this.aggregateStore.onTileUpdate(a);for(const b of a.added)this._source.subscribe(b),this._level=b.level;for(const b of a.removed)this._source.unsubscribe(b),this._cleanupNeeded=!0,this._tileToResolver.has(b.id)&&(this._tileToResolver.get(b.id).resolve(),this._tileToResolver.delete(b.id));this.notifyChange("updating")};
c.onIdle=function(){this._invalidated&&((this.hasAggregates||"heatmap"===this.processor.type)&&this._repushTiles(),this._invalidated=!1);this._markAndSweep()};c.queryExtent=function(a){return this.queryEngine.executeQueryForExtent(a)};c.queryFeatures=function(a){return this.queryEngine.executeQuery(a)};c.queryFeatureCount=function(a){return this.queryEngine.executeQueryForCount(a)};c.queryLatestObservations=function(a){return this.queryEngine.executeQueryForLatestObservations(a)};c.queryObjectIds=
function(a){return this.queryEngine.executeQueryForIds(a)};c.queryStatistics=async function(){return{...this.featureStore.storeStatistics,displayedFeatureCount:0,displayedVertexCount:0,displayPreProcessTime:0}};c.getObjectId=function(a){return this.featureStore.lookupObjectId(a,this._storage)};c.getDisplayId=function(a){if(this._schema.targets.aggregate){const b=this.aggregateStore.getDisplayId(a);return p.isNone(b)?(a=this.featureStore.lookupDisplayId(a),this.aggregateStore.getDisplayIdForReferenceId(a)):
b}return this.featureStore.lookupDisplayId(a)};c.getFeature=function(a){a=this.featureStore.lookupFeatureByDisplayId(a,this._storage);if(p.isNone(a))return null;var b=a.readHydratedGeometry();b=z.convertToGeometry(b,a.geometryType,a.hasZ,a.hasM);return{attributes:a.readAttributes(),geometry:b}};c.getAggregate=function(a){return this.aggregateStore.getAggregate(a)};c.setHighlight=async function(a){const b=a.map(d=>this.getDisplayId(d));return this.attributeStore.setHighlight(a,b)};c._lookupObjectIdByGlobalId=
function(a){const b=this.service.globalIdField;if(p.isNone(b))throw Error("Expected globalIdField to be defined");let d=null;this.featureStore.forEach(e=>{a===e.readAttribute(b)&&(d=e.getObjectId())});if(p.isNone(d))throw Error(`Expected to find a feature with globalId ${a}`);return d};c._repushTiles=function(){for(const a of this.tileStore.tiles)this._patchTile({type:"append",id:a.key.id,addOrUpdate:C.FeatureSetReaderJSON.fromOptimizedFeatures([],this.service.geometryType),remove:[],end:!0,status:I.UpdateToken.empty()})};
c._maybeForceCleanup=function(){5E3<performance.now()-this._lastCleanup&&this._markAndSweep()};c._patchTile=function(a,b){a=this._updateQueue.push(a,b).then(()=>{this.notifyChange("updating")}).catch(d=>{this.notifyChange("updating")});this.notifyChange("updating");return a};c._onTileMessage=async function(a,b){g.throwIfAborted(b);const d=this.tileStore.get(a.id);if(d){if(a.clear)return this.processor.onTileClear(d);var e=a.status;a.remove.length&&(this._cleanupNeeded=!0);var n=[];for(const q of a.remove)n.push(this.featureStore.lookupDisplayId(q));
a.remove=n;try{if(p.isNone(a.addOrUpdate))this.processor.onTileMessage(d,{...a,addOrUpdate:null},this.hasAggregates,b).catch(g.throwIfNotAbortError);else{a.addOrUpdate.setArcadeSpatialReference(this.spatialReference);this.featureStore.hasInstance(a.addOrUpdate.instance)&&e.targets.feature||(e.targets.feature=!0,this.featureStore.onTileData(d,a));e.storage.data&&e.storage.filters||(e.storage.data=!0,e.storage.filters=!0,this.attributeStore.onTileData(d,a),"geoevent"===this._source.type?(await this.attributeStore.sendUpdates(),
g.throwIfAborted(b)):this.attributeStore.sendUpdates());if(this.hasAggregates&&!e.targets.aggregate){e.targets.aggregate=!0;const q=v(this._source)&&this._source.loading,w=!v(this._source)||q||a.end;this.aggregateStore.onTileData(d,a,this._storage,this.attributeStore,w);if(!w)return;e.mesh||(this.attributeStore.onTileData(d,a),this.attributeStore.sendUpdates(),this.processor.onTileClear(d))}e.mesh||(e.mesh=!0,await this.processor.onTileMessage(d,a,this.hasAggregates,b),g.throwIfAborted(b));this._maybeForceCleanup()}}catch(q){g.throwIfNotAbortError(q)}}};
c._mark=function(a,b,d){const e=this._storage.getInstanceId(a);a&&(b.add((4294901760&e)>>>16),d.set(a))};c._markAndSweep=function(){this._lastCleanup=performance.now();if(!("feature"===this._source.type&&"snapshot"===this._source.mode||"geoevent"!==this._source.type&&!this._cleanupNeeded)){this._cleanupNeeded=!1;var a=this._storage.getBitset(this._markedIdsBufId),b=new Set;a.clear();for(const d of this.tileStore.tiles)this._source.forEachRequest(d.key.id,e=>{if(!p.isNone(e.addOrUpdate))for(e=e.addOrUpdate.getCursor();e.next();){var n=
e.getDisplayId();n||(n=e.getObjectId(),n=this.featureStore.lookupDisplayId(n));this._mark(n,b,a)}});this._source.forEachPendingEdit(d=>{d=this.featureStore.lookupDisplayId(d);this._mark(d,b,a)});this._updateQueue.forEach(d=>{for(const e of d.remove)d=this.featureStore.lookupDisplayId(e),this._mark(d,b,a)});this.config.schema.targets.aggregate&&(this.aggregateStore.sweepFeatures(a,this.featureStore),this.aggregateStore.sweepClusters(this._storage,this.attributeStore,this._level));this.featureStore.sweepFeatures(a,
this._storage,this.attributeStore);this.featureStore.sweepFeatureSets(b)}};u._createClass(r,[{key:"fieldsIndex",get:function(){return new A(this.service.fields)}},{key:"hasAggregates",get:function(){return!!this.config.schema.targets.aggregate}},{key:"spatialReference",get:function(){return this.tileStore.tileScheme.spatialReference}},{key:"updating",get:function(){return this.isUpdating()}}]);return r}(B.HandleOwner);h.__decorate([l.property({constructOnly:!0})],f.prototype,"tileStore",void 0);h.__decorate([l.property()],
f.prototype,"config",void 0);h.__decorate([l.property({readOnly:!0})],f.prototype,"fieldsIndex",null);h.__decorate([l.property()],f.prototype,"processor",void 0);h.__decorate([l.property({constructOnly:!0})],f.prototype,"remoteClient",void 0);h.__decorate([l.property({constructOnly:!0})],f.prototype,"service",void 0);h.__decorate([l.property()],f.prototype,"spatialReference",null);h.__decorate([l.property()],f.prototype,"updating",null);return f=h.__decorate([y.subclass("esri.views.2d.layers.features.controllers.FeatureController2D")],
f)});