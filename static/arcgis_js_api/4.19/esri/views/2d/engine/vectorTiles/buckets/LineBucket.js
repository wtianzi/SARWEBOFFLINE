// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define(["../../../../../chunks/_rollupPluginBabelHelpers","../../webgl/mesh/templates/util","../../webgl/TurboLine","./BaseBucket"],function(r,t,p,v){const u=1/3.8,w=b=>a=>{a.entry0=b._lineVertexBuffer.index;b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.prevNormal.x,a.prevNormal.y,0,-1,a.distance,b._ddValues);a.entry2=b._lineVertexBuffer.index;b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.prevNormal.x,-a.prevNormal.y,0,1,a.distance,b._ddValues);a.exit0=b._lineVertexBuffer.index;
b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.nextNormal.x,a.nextNormal.y,0,-1,a.distance,b._ddValues);a.exit2=b._lineVertexBuffer.index;b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.nextNormal.x,-a.nextNormal.y,0,1,a.distance,b._ddValues)},x=b=>a=>{b._lineIndexBuffer.add(a.leftExit0,a.rightEntry0,a.leftExit2);b._lineIndexBuffer.add(a.rightEntry0,a.rightEntry2,a.leftExit2)},z=b=>a=>{var h=2===b._joinType?b._miterLimitCosine:b._roundLimitCosine,d=a.isCap&&0!==b._capType,
c=!1;.97<a.cosine?(a.exit0=a.entry0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.bisector.x/a.cosine,a.bisector.y/a.cosine,0,-1,a.distance,b._ddValues),a.exit2=a.entry2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.bisector.x/a.cosine,-a.bisector.y/a.cosine,0,1,a.distance,b._ddValues)):a.cosine<1-.97?(a.entry0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.prevNormal.x,a.prevNormal.y,
0,-1,a.distance,b._ddValues),a.entry2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.prevNormal.x,-a.prevNormal.y,0,1,a.distance,b._ddValues),a.exit0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.nextNormal.x,a.nextNormal.y,0,-1,a.distance,b._ddValues),a.exit2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.nextNormal.x,-a.nextNormal.y,0,1,a.distance,b._ddValues)):a.canSplit?
(p.splitVertex(),0<a.sign?(a.splitInner?(a.exit0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.leftInner.x,a.leftInner.y,0,-1,a.distance,b._ddValues),a.entry0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.rightInner.x,a.rightInner.y,0,-1,a.distance,b._ddValues)):(a.exit0=a.entry0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.bisector.x/a.cosine,a.bisector.y/a.cosine,0,-1,a.distance,
b._ddValues)),a.cosine<h?(c=!a.isCap,a.entry2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.prevNormal.x,-a.prevNormal.y,0,1,a.distance,b._ddValues),a.exit2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.nextNormal.x,-a.nextNormal.y,0,1,a.distance,b._ddValues)):a.splitOuter?(c=c||a.gapOuter,a.entry2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.leftOuter.x,-a.leftOuter.y,
0,1,a.distance,b._ddValues),a.exit2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.rightOuter.x,-a.rightOuter.y,0,1,a.distance,b._ddValues)):(a.entry2=a.exit2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.bisector.x/a.cosine,-a.bisector.y/a.cosine,0,1,a.distance,b._ddValues))):(a.splitInner?(a.exit2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.leftInner.x,-a.leftInner.y,
0,1,a.distance,b._ddValues),a.entry2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.rightInner.x,-a.rightInner.y,0,1,a.distance,b._ddValues)):(a.exit2=a.entry2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.bisector.x/a.cosine,-a.bisector.y/a.cosine,0,1,a.distance,b._ddValues)),a.cosine<h?(c=!a.isCap,a.entry0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.prevNormal.x,a.prevNormal.y,
0,-1,a.distance,b._ddValues),a.exit0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.nextNormal.x,a.nextNormal.y,0,-1,a.distance,b._ddValues)):a.splitOuter?(c=c||a.gapOuter,a.entry0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.leftOuter.x,a.leftOuter.y,0,-1,a.distance,b._ddValues),a.exit0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.rightOuter.x,a.rightOuter.y,0,-1,a.distance,
b._ddValues)):(a.exit0=a.entry0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.bisector.x/a.cosine,a.bisector.y/a.cosine,0,-1,a.distance,b._ddValues)))):0<a.sign?(a.exit0=a.entry0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.bisector.x/a.cosine,a.bisector.y/a.cosine,0,-1,a.distance,b._ddValues),a.cosine<h?(c=!a.isCap,a.entry2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.prevNormal.x,
-a.prevNormal.y,0,1,a.distance,b._ddValues),a.exit2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.nextNormal.x,-a.nextNormal.y,0,1,a.distance,b._ddValues)):(a.entry2=a.exit2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.bisector.x/a.cosine,-a.bisector.y/a.cosine,0,1,a.distance,b._ddValues))):(a.exit2=a.entry2=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.bisector.x/a.cosine,
-a.bisector.y/a.cosine,0,1,a.distance,b._ddValues),a.cosine<h?(c=!a.isCap,a.entry0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.prevNormal.x,a.prevNormal.y,0,-1,a.distance,b._ddValues),a.exit0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.nextNormal.x,a.nextNormal.y,0,-1,a.distance,b._ddValues)):(a.exit0=a.entry0=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.bisector.x/a.cosine,
a.bisector.y/a.cosine,0,-1,a.distance,b._ddValues)));a.canSplit&&(a.splitInner||a.splitOuter)||c||d?(h=a.entry1=a.exit1=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,0,0,0,0,a.distance,b._ddValues)):h=a.entry1=a.exit1=null;if(c&&1!==b._joinType)b._lineIndexBuffer.add(h,0<a.sign?a.exit2:a.entry0,0<a.sign?a.entry2:a.exit0);else if(d&&1===b._capType||c&&1===b._joinType){let m,n;if(a.isCap){c=Math.PI;d=Math.ceil(c/.8);var f=c/d;if(a.isFirstVertex){var e=a.prevNormal.x;
var g=a.prevNormal.y;m=a.entry0;n=a.entry2}else a.isLastVertex&&(e=-a.nextNormal.x,g=-a.nextNormal.y,m=a.exit2,n=a.exit0)}else e=2*Math.acos(a.cosine),d=Math.ceil(e/.8),f=e/d,e=0<a.sign?-a.prevNormal.x:a.nextNormal.x,g=0<a.sign?-a.prevNormal.y:a.nextNormal.y,m=0<a.sign?a.entry2:a.exit0,n=0<a.sign?a.exit2:a.entry0;c=Math.cos(f);f=Math.sin(f);var l=f*e+c*g;e=c*e-f*g;g=l;for(l=0;l<d;++l){var q=k;if(l<d-1)if(a.isCap){const y=a.isFirstVertex?-1:1;var k=b._lineVertexBuffer.index;b._lineVertexBuffer.add(a.currentVertex.x,
a.currentVertex.y,e,g,y,0,a.distance,b._ddValues)}else k=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,e,g,0,a.sign,a.distance,b._ddValues);b._lineIndexBuffer.add(0===l?m:q,h,l===d-1?n:k);q=f*e+c*g;e=c*e-f*g;g=q}}else d&&2===b._capType&&(k=a.isFirstVertex?1:-1,b._hasPattern?(e=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.prevNormal.x-k*a.inbound.x,a.prevNormal.y-k*a.inbound.y,-k,-1,a.distance,b._ddValues),g=b._lineVertexBuffer.index,
b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.prevNormal.x-k*a.inbound.x,-a.prevNormal.y-k*a.inbound.y,-k,1,a.distance,b._ddValues)):(e=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,a.prevNormal.x-k*a.inbound.x,a.prevNormal.y-k*a.inbound.y,0,-1,a.distance,b._ddValues),g=b._lineVertexBuffer.index,b._lineVertexBuffer.add(a.currentVertex.x,a.currentVertex.y,-a.prevNormal.x-k*a.inbound.x,-a.prevNormal.y-k*a.inbound.y,0,1,a.distance,b._ddValues)),
0<k?(b._lineIndexBuffer.add(h,a.entry2,g),b._lineIndexBuffer.add(h,g,e),b._lineIndexBuffer.add(h,e,a.entry0)):(b._lineIndexBuffer.add(h,g,a.exit2),b._lineIndexBuffer.add(h,e,g),b._lineIndexBuffer.add(h,a.exit0,e)))},A=b=>a=>{b._lineIndexBuffer.add(a.leftExit0,a.rightEntry0,null!=a.leftExit1?a.leftExit1:a.leftExit2);b._lineIndexBuffer.add(a.rightEntry0,null!=a.rightEntry1?a.rightEntry1:a.rightEntry2,null!=a.leftExit1?a.leftExit1:a.leftExit2);null!=a.leftExit1&&null!=a.rightEntry1?(b._lineIndexBuffer.add(a.leftExit1,
a.rightEntry1,a.leftExit2),b._lineIndexBuffer.add(a.rightEntry1,a.rightEntry2,a.leftExit2)):null!=a.leftExit1?b._lineIndexBuffer.add(a.leftExit1,a.rightEntry2,a.leftExit2):null!=a.rightEntry1&&b._lineIndexBuffer.add(a.rightEntry1,a.rightEntry2,a.leftExit2)};return function(b){function a(d,c,f,e){c=b.call(this,d,c)||this;c.type=2;c._tessellationOptions={};c.tessellationProperties={_lineVertexBuffer:null,_lineIndexBuffer:null,_hasPattern:null,_ddValues:null,_capType:null,_joinType:null,_miterLimitCosine:null,
_roundLimitCosine:null};c.tessellationProperties._lineVertexBuffer=f;c.tessellationProperties._lineIndexBuffer=e;c.tessellationProperties._hasPattern=d.getPaintValue("line-pattern",c.zoom)||0<d.getPaintValue("line-dasharray",c.zoom).length;c._isThinLine=d.isThinLine;c._tessellationCallbacks=c._isThinLine?{vertex:w(c.tessellationProperties),bridge:x(c.tessellationProperties)}:{vertex:z(c.tessellationProperties),bridge:A(c.tessellationProperties)};return c}r._inheritsLoose(a,b);var h=a.prototype;h.processFeatures=
function(d){this._lineIndexStart=3*this.tessellationProperties._lineIndexBuffer.index;this._lineIndexCount=0;const c=this.layer,f=this.zoom;d&&d.setExtent(this.layerExtent);for(const e of this._features){const g=c.hasDataDrivenLine?c.lineMaterial.encodeAttributes(e,f,c):null;this.tessellationProperties._capType=c.getLayoutValue("line-cap",f,e);this.tessellationProperties._joinType=c.getLayoutValue("line-join",f,e);this.tessellationProperties._miterLimitCosine=t.getLimitCosine(c.getLayoutValue("line-miter-limit",
f,e));this.tessellationProperties._roundLimitCosine=t.getLimitCosine(c.getLayoutValue("line-round-limit",f,e));const l=e.getGeometry(d);this._processFeature(l,g)}p.cleanup()};h.serialize=function(){var d=6+this.layerUIDs.length;d+=this.tessellationProperties._lineVertexBuffer.array.length;d+=this.tessellationProperties._lineIndexBuffer.array.length;d=new Uint32Array(d);var c=new Int32Array(d.buffer);let f=0;d[f++]=this.type;d[f++]=this.layerUIDs.length;for(var e=0;e<this.layerUIDs.length;e++)d[f++]=
this.layerUIDs[e];d[f++]=this._lineIndexStart;d[f++]=this._lineIndexCount;d[f++]=this.tessellationProperties._lineVertexBuffer.array.length;for(e=0;e<this.tessellationProperties._lineVertexBuffer.array.length;e++)c[f++]=this.tessellationProperties._lineVertexBuffer.array[e];d[f++]=this.tessellationProperties._lineIndexBuffer.array.length;for(c=0;c<this.tessellationProperties._lineIndexBuffer.array.length;c++)d[f++]=this.tessellationProperties._lineIndexBuffer.array[c];return d.buffer};h._processFeature=
function(d,c){if(d){var f=d.length;for(let e=0;e<f;e++)this._processGeometry(d[e],c)}};h._processGeometry=function(d,c){if(!(2>d.length)){for(var f=d[0],e=1,g,l;e<d.length;)g=d[e].x-f.x,l=d[e].y-f.y,1E-6>g*g+l*l?d.splice(e,1):(f=d[e],++e);2>d.length||(f=3*this.tessellationProperties._lineIndexBuffer.index,this._tessellationOptions.trackDistance=this.tessellationProperties._hasPattern,this._tessellationOptions.initialDistance=0,this._tessellationOptions.thin=this._isThinLine,this._tessellationOptions.wrapDistance=
65535,this._tessellationOptions.outerBisectorAutoSplitThreshold=u,this._tessellationOptions.enableOuterBisectorSplit=this.tessellationProperties._hasPattern,this._tessellationOptions.innerBisectorAutoSplitThreshold=u,this._tessellationOptions.enableInnerBisectorSplit=this.tessellationProperties._hasPattern,this.tessellationProperties._ddValues=c,p.tessellate(d,this._tessellationOptions,this._tessellationCallbacks),this._lineIndexCount+=3*this.tessellationProperties._lineIndexBuffer.index-f)}};r._createClass(a,
[{key:"lineIndexStart",get:function(){return this._lineIndexStart}},{key:"lineIndexCount",get:function(){return this._lineIndexCount}}]);return a}(v)});