// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define(["exports","../../core/has","../../core/maybe"],function(k,u,r){function m(a){return a[0].stride}function n(a){switch(a){case 5126:return 4;case 5124:return 4;case 5125:return 4;case 5122:return 2;case 5123:return 2;case 5120:return 1;case 5121:return 1;default:throw Error("Unknown data type");}}function p(a){switch(a){case 6406:case 6409:case 36168:return 1;case 6410:case 32854:case 33325:case 32854:case 33189:return 2;case 6407:case 6402:return 3;case 6408:case 34041:case 33326:case 35898:case 33327:case 34041:return 4;
case 33328:case 34842:return 8;case 34836:return 16;case 33776:case 33777:return.5;case 33778:case 33779:return 1;case 37488:case 37489:case 37492:case 37493:case 37494:case 37495:return.5;case 37490:case 37491:case 37496:case 37497:return 1}return 0}function l(a){if(r.isNone(a))return 0;if("colorAttachment"in a)return a.glName?l(a.colorAttachment)+l(a.depthStencilAttachment):0;if("descriptor"in a)return a.glName?l(a.descriptor):0;const f=a.internalFormat||"pixelFormat"in a&&a.pixelFormat;if(!f)return 0;
const d="hasMipmap"in a&&a.hasMipmap?1.3:1;a=a.width*a.height;return p(f)*a*d}k.addDescriptor=function(a,f,d,b,h,g){const e=n(b);if(0<a.length){const c=a[0].stride,q=c+e*d;a.forEach(t=>t.stride=q);a.push({name:f,count:d,type:b,offset:c,stride:q,normalized:h,divisor:g})}else a.push({name:f,count:d,type:b,offset:0,stride:e*d,normalized:h,divisor:g})};k.bindVertexBufferLayout=function(a,f,d,b,h){const g=a.gl,e=a.capabilities.instancing;a.bindBuffer(d);for(const c of b)if(a=f[c.name],d=(h?h:0+c.baseInstance?
c.baseInstance:0)*c.stride,void 0===a&&console.error(`There is no location for vertex attribute '${c.name}' defined.`),c.baseInstance&&!c.divisor&&console.error(`Vertex attribute '${c.name}' uses baseInstanceOffset without divisor.`),4>=c.count)g.vertexAttribPointer(a,c.count,c.type,c.normalized,c.stride,c.offset+d),g.enableVertexAttribArray(a),c.divisor&&0<c.divisor&&e&&e.vertexAttribDivisor(a,c.divisor);else if(9===c.count)for(b=0;3>b;b++)g.vertexAttribPointer(a+b,3,c.type,c.normalized,c.stride,
c.offset+12*b+d),g.enableVertexAttribArray(a+b),c.divisor&&0<c.divisor&&e&&e.vertexAttribDivisor(a+b,c.divisor);else if(16===c.count)for(b=0;4>b;b++)g.vertexAttribPointer(a+b,4,c.type,c.normalized,c.stride,c.offset+16*b+d),g.enableVertexAttribArray(a+b),c.divisor&&0<c.divisor&&e&&e.vertexAttribDivisor(a+b,c.divisor);else console.error("Unsupported vertex attribute element count: "+c.count)};k.copyFramebufferToTexture=function(a,f,d,b,h=0){const g=a.getBoundFramebufferObject(),e=a.getBoundTexture(0);
a.bindFramebuffer(f);a.bindTexture(d,0);a.gl.copyTexImage2D(a.gl.TEXTURE_2D,h,d.descriptor.pixelFormat,b[0],b[1],b[2],b[3],0);a.gl.flush();a.bindFramebuffer(g);a.bindTexture(e,0)};k.findAttribute=function(a,f){for(let d=0;d<a.length;d++)if(a[d].name===f)return a[d];return null};k.getBytesPerElement=n;k.getBytesPerElementFormat=p;k.getGpuMemoryUsage=l;k.getStride=m;k.getTypedArrayConstructor=function(a){switch(a){case 5120:return Int8Array;case 5126:return Float32Array;case 5124:return Int32Array;
case 5122:return Int16Array;case 5121:return Uint8Array;case 5125:return Uint32Array;case 5123:return Uint16Array;default:throw Error("Unknown data type");}};k.hasAttribute=function(a,f){for(let d=0;d<a.length;d++)if(a[d].name===f)return!0;return!1};k.setBaseInstanceOffset=function(a,f){const d={};for(const b in a)d[b]=a[b].map(h=>h.divisor?{...h,baseInstance:f}:h);return d};k.unbindVertexBufferLayout=function(a,f,d,b){const h=a.gl,g=a.capabilities.instancing;a.bindBuffer(d);for(const e of b)if(d=
f[e.name],4>=e.count)h.disableVertexAttribArray(d),e.divisor&&0<e.divisor&&g&&g.vertexAttribDivisor(d,0);else if(9===e.count)for(b=0;3>b;b++)h.disableVertexAttribArray(d+b),e.divisor&&0<e.divisor&&g&&g.vertexAttribDivisor(d+b,0);else if(16===e.count)for(b=0;4>b;b++)h.disableVertexAttribArray(d+b),e.divisor&&0<e.divisor&&g&&g.vertexAttribDivisor(d+b,0);else console.error("Unsupported vertex attribute element count: "+e.count);a.unbindBuffer(34962)};k.vertexCount=function(a,f){return a.vertexBuffers[f].size/
m(a.layout[f])};Object.defineProperty(k,"__esModule",{value:!0})});