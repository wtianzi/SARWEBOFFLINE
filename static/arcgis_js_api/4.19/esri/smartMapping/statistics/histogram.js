// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define("../../core/maybe ../../core/Error ../../layers/support/fieldUtils ../support/utils ./support/utils ../support/adapters/support/layerUtils".split(" "),function(n,d,g,h,k,l){async function p(a){if(!(a&&a.layer&&(a.field||a.valueExpression||a.sqlExpression)))throw new d("histogram:missing-parameters","'layer' and 'field', 'valueExpression' or 'sqlExpression' parameters are required");if(a.valueExpression&&!a.sqlExpression&&!a.view)throw new d("histogram:missing-parameters","View is required when 'valueExpression' is specified");
var b=[0,2,1,3,4];const {layer:f,...q}=a;var c=l.createLayerAdapter(f,b);a={layerAdapter:c,...q};a.normalizationType=h.getNormalizationType(a);if(!c)throw new d("histogram:invalid-parameters","'layer' must be one of these types: "+l.getLayerTypeLabels(b).join(", "));b=n.isSome(a.signal)?{signal:a.signal}:null;await c.load(b);const r=a.valueExpression||a.sqlExpression;var e=a.field;b=e?c.getField(e):null;const m=!a.classificationMethod||"equal-interval"===a.classificationMethod;e=await h.getFieldsList({field:e,
normalizationField:a.normalizationField,valueExpression:a.valueExpression});if(e=k.verifyBasicFieldValidity(c,e,"histogram:invalid-parameters"))throw e;if(b){if(c=k.verifyFieldType(c,b,"histogram:invalid-parameters",t))throw c;if(g.isDateField(b)){if(a.normalizationType)throw new d("histogram:invalid-parameters","Normalization is not allowed for date fields");if(!m)throw new d("histogram:invalid-parameters","'classificationMethod' other than 'equal-interval' is not allowed for date fields");}}else if(r){if(a.normalizationType)throw new d("histogram:invalid-parameters",
"Normalization is not allowed when 'valueExpression' or 'sqlExpression' is specified");if(!m)throw new d("histogram:invalid-parameters","'classificationMethod' other than 'equal-interval' is not allowed when 'valueExpression' or 'sqlExpression' is specified");}return a}const t=["date",...g.numericTypes];return async function(a){const {layerAdapter:b,...f}=await p(a);return b.histogram(f)}});