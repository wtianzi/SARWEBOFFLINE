// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define(["../../core/maybe","../../core/Error","../support/utils","./support/utils","../support/adapters/support/layerUtils"],function(r,b,k,l,m){async function t(a){if(!a||!a.layer||!a.field&&!a.valueExpression)throw new b("class-breaks:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");if(a.valueExpression&&!a.view)throw new b("class-breaks:missing-parameters","View is required when 'valueExpression' is specified");var c=[0,2,1,3];const {layer:f,...u}=a;var d=
m.createLayerAdapter(f,c);a={layerAdapter:d,...u};a.normalizationType=k.getNormalizationType(a);a.numClasses=a.numClasses||5;if(!d)throw new b("class-breaks:invalid-parameters","'layer' must be one of these types: "+m.getLayerTypeLabels(c).join(", "));c=r.isSome(a.signal)?{signal:a.signal}:null;await d.load(c);var e=a.field;c=a.minValue;const g=a.maxValue,v=null!=c||null!=g,n=a.classificationMethod,p="percent-of-total"===a.normalizationType,q=!1!==a.analyzeData;e=e?d.getField(e):null;var h=await k.getFieldsList({field:a.field,
normalizationField:a.normalizationField,valueExpression:a.valueExpression});if(h=l.verifyBasicFieldValidity(d,h,"class-breaks:invalid-parameters"))throw h;if(e&&(d=l.verifyNumericField(d,e,"class-breaks:invalid-parameters")))throw d;if(a.valueExpression&&a.normalizationType)throw new b("class-breaks:invalid-parameters","Normalization is not allowed when 'valueExpression' is specified");if(v)if(q){if(p&&null==a.normalizationTotal)throw new b("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'minValue', 'maxValue' are specified");
}else{if(null==c||null==g)throw new b("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");if(c>=g)throw new b("class-breaks:invalid-parameters","'minValue' should be less than 'maxValue'");if(n&&"equal-interval"!==n)throw new b("class-breaks:invalid-parameters","'classificationMethod' other than 'equal-interval' is not allowed when 'analyzeData' is false");if(p&&null==a.normalizationTotal)throw new b("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'analyzeData' is false");
}else if(!q)throw new b("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");return a}return async function(a){const {layerAdapter:c,...f}=await t(a);return c.classBreaks(f)}});