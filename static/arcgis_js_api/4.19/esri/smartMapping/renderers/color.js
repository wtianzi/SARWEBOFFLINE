// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define("exports ../../core/maybe ../../core/Error ../../intl/substitute ../../intl/messages ../../renderers/PointCloudRenderer ../../renderers/PointCloudClassBreaksRenderer ../../renderers/PointCloudRGBRenderer ../../renderers/PointCloudStretchRenderer ../../renderers/PointCloudUniqueValueRenderer ../../renderers/support/AuthoringInfoVisualVariable ../../renderers/support/AuthoringInfo ../../renderers/Renderer ../../renderers/visualVariables/ColorVariable ../../renderers/ClassBreaksRenderer ../../renderers/UniqueValueRenderer ../../renderers/DictionaryRenderer ../../renderers/DotDensityRenderer ../../renderers/HeatmapRenderer ../../renderers/SimpleRenderer ../../renderers/support/jsonUtils ../support/utils ../../renderers/support/utils ../support/adapters/support/layerUtils ../statistics/support/ageUtils ../heuristics/ageUnit ../heuristics/outline ../heuristics/sizeRange ./support/utils ../../chunks/color".split(" "),
function(x,v,l,P,D,ja,ka,Q,R,la,S,G,ma,T,H,na,oa,pa,qa,ra,sa,A,I,r,B,U,J,K,d,w){async function V(a){if(!(a&&a.layer&&(a.field||a.valueExpression||a.sqlExpression)))throw new l("color-visual-variable:missing-parameters","'layer' and 'field', 'valueExpression' or 'sqlExpression' parameters are required");if(a.valueExpression&&!a.sqlExpression&&!a.view)throw new l("color-visual-variable:missing-parameters","View is required when 'valueExpression' is specified");a={...a};if("90-10"===a.theme)throw new l("color-visual-variable:not-supported",
"Only 'high-to-low', 'above-and-below', 'centered-on', 'extremes', 'above', 'below' themes are supported.");var b=[0,2,1,3],c=r.createLayerAdapter(a.layer,b);a.layer=c;if(!c)throw new l("color-visual-variable:invalid-parameters","'layer' must be one of these types: "+r.getLayerTypeLabels(b).join(", "));b=v.isSome(a.signal)?{signal:a.signal}:null;await c.load(b);if("mesh"!==c.geometryType&&a.worldScale&&(!a.view||"3d"!==a.view.type))return Promise.reject(d.createError("color-visual-variable:invalid-parameters",
"'view' parameter should be an instance of SceneView when 'worldScale' parameter is true"));b=await A.getFieldsList({field:a.field,normalizationField:a.normalizationField,valueExpression:a.valueExpression});if(c=d.verifyBasicFieldValidity(c,b,"color-visual-variable:invalid-parameters"))throw c;return a}async function W(a){if(!(a&&a.layer&&(a.field||a.valueExpression||a.sqlExpression)))throw new l("color-continuous-renderer:missing-parameters","'layer' and 'field', 'valueExpression' or 'sqlExpression' parameters are required");
if(a.valueExpression&&!a.sqlExpression&&!a.view)throw new l("color-continuous-renderer:missing-parameters","View is required when 'valueExpression' is specified");a={...a};a.symbolType=a.symbolType||"2d";a.defaultSymbolEnabled=null==a.defaultSymbolEnabled?!0:a.defaultSymbolEnabled;var b=[0,2,1,3],c=r.createLayerAdapter(a.layer,b);a.layer=c;if(!c)throw new l("color-continuous-renderer:invalid-parameters","'layer' must be one of these types: "+r.getLayerTypeLabels(b).join(", "));b=v.isSome(a.signal)?
{signal:a.signal}:null;await c.load(b);b=c.geometryType;a.outlineOptimizationEnabled="polygon"===b?a.outlineOptimizationEnabled:!1;a.sizeOptimizationEnabled="point"===b||"multipoint"===b||"polyline"===b?a.sizeOptimizationEnabled:!1;if("mesh"===b)a.symbolType="3d-volumetric",a.colorMixMode=a.colorMixMode||"replace",a.edgesType=a.edgesType||"none";else{if("3d-volumetric-uniform"===a.symbolType&&"point"!==b)throw new l("color-continuous-renderer:not-supported","3d-volumetric-uniform symbols are supported for point layers only");
if(-1<a.symbolType.indexOf("3d-volumetric")&&(!a.view||"3d"!==a.view.type))throw new l("color-continuous-renderer:invalid-parameters","'view' parameter should be an instance of SceneView when 'symbolType' parameter is '3d-volumetric' or '3d-volumetric-uniform'");}b=await A.getFieldsList({field:a.field,normalizationField:a.normalizationField,valueExpression:a.valueExpression});if(c=d.verifyBasicFieldValidity(c,b,"color-continuous-renderer:invalid-parameters"))throw c;return a}async function X(a){if(!a||
!a.layer||!a.field&&!a.valueExpression)throw new l("color-class-breaks-renderer:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");if(a.valueExpression&&!a.view)throw new l("color-class-breaks-renderer:missing-parameters","View is required when 'valueExpression' is specified");a={...a};a.symbolType=a.symbolType||"2d";a.defaultSymbolEnabled=null==a.defaultSymbolEnabled?!0:a.defaultSymbolEnabled;a.classificationMethod=a.classificationMethod||"equal-interval";a.normalizationType=
A.getNormalizationType(a);var b=[0,2,1,3],c=r.createLayerAdapter(a.layer,b);a.layer=c;if(!c)throw new l("color-class-breaks-renderer:invalid-parameters","'layer' must be one of these types: "+r.getLayerTypeLabels(b).join(", "));if(!(null!=a.minValue&&null!=a.maxValue||null==a.minValue&&null==a.maxValue))throw new l("color-class-breaks-renderer:missing-parameters","Both 'minValue' and 'maxValue' are required when specifying custom data range");b=v.isSome(a.signal)?{signal:a.signal}:null;await c.load(b);
b=c.geometryType;a.outlineOptimizationEnabled="polygon"===b?a.outlineOptimizationEnabled:!1;if("mesh"===b)a.symbolType="3d-volumetric",a.colorMixMode=a.colorMixMode||"replace",a.edgesType=a.edgesType||"none";else{if("3d-volumetric-uniform"===a.symbolType&&"point"!==b)throw new l("color-continuous-renderer:not-supported","3d-volumetric-uniform symbols are supported for point layers only");if(-1<a.symbolType.indexOf("3d-volumetric")&&(!a.view||"3d"!==a.view.type))throw new l("color-class-breaks-renderer:invalid-parameters",
"'view' parameter should be an instance of SceneView when 'symbolType' parameter is '3d-volumetric' or '3d-volumetric-uniform'");}b=await A.getFieldsList({field:a.field,normalizationField:a.normalizationField});if(c=d.verifyBasicFieldValidity(c,b,"color-class-breaks-renderer:invalid-parameters"))throw c;return a}function Y(a){a={...a};delete a.basemap;delete a.colorScheme;delete a.legendOptions;delete a.symbolType;delete a.defaultSymbolEnabled;delete a.colorMixMode;delete a.edgesType;a.analyzeData=
!(null!=a.minValue&&null!=a.maxValue);return a}function Z(a){if(!a||!a.layer)return Promise.reject(d.createError("color-point-cloud-true-color-renderer:missing-parameters","'layer' parameter is required"));const b={...a};var c=[4];a=r.createLayerAdapter(b.layer,c);b.layer=a;b.density=b.density||25;b.size=b.size||"100%";if(!d.isValidPointSize(b.size))return Promise.reject(d.createError("color-point-cloud-true-color-renderer:invalid-parameters","Invalid 'size' parameter. It should be a string of the form '100%'"));
if(!a)return Promise.reject(d.createError("color-point-cloud-true-color-renderer:invalid-parameters","'layer' must be one of these types: "+r.getLayerTypeLabels(c).join(", ")));c=v.isSome(b.signal)?{signal:b.signal}:null;return a.load(c).then(()=>b)}function aa(a){if(!(a&&a.layer&&a.field))return Promise.reject(d.createError("color-point-cloud-continuous-renderer:missing-parameters","'layer' and 'field' parameters are required"));var b=a.field.toLowerCase();if("intensity"!==b&&"elevation"!==b)return Promise.reject(d.createError("color-point-cloud-continuous-renderer:invalid-parameters",
"'field' should be either 'intensity' or 'elevation'"));const c={...a};b=[4];a=r.createLayerAdapter(c.layer,b);c.layer=a;c.density=c.density||25;c.size=c.size||"100%";if(!d.isValidPointSize(c.size))return Promise.reject(d.createError("color-point-cloud-continuous-renderer:invalid-parameters","Invalid 'size' parameter. It should be a string of the form '100%'"));if(!a)return Promise.reject(d.createError("color-point-cloud-continuous-renderer:invalid-parameters","'layer' must be one of these types: "+
r.getLayerTypeLabels(b).join(", ")));b=v.isSome(c.signal)?{signal:c.signal}:null;return a.load(b).then(()=>c)}function L(a){a={...a};const b=-1<a.symbolType.indexOf("3d-volumetric");delete a.symbolType;delete a.defaultSymbolEnabled;delete a.colorMixMode;delete a.edgesType;a.worldScale=b;return a}async function ba(a){if(!(a&&a.layer&&a.view&&a.startTime&&a.endTime))throw new l("color-age-renderer:missing-parameters","'layer', 'view', startTime', 'endTime' parameters are required");a={...a};a.symbolType=
a.symbolType||"2d";a.defaultSymbolEnabled=null==a.defaultSymbolEnabled?!0:a.defaultSymbolEnabled;var b=[0,2,1,3],c=r.createLayerAdapter(a.layer,b);a.layer=c;if(!c)throw new l("color-age-renderer:invalid-parameters","'layer' must be one of these types: "+r.getLayerTypeLabels(b).join(", "));b=v.isSome(a.signal)?{signal:a.signal}:null;await c.load(b);b=c.geometryType;a.outlineOptimizationEnabled="polygon"===b?a.outlineOptimizationEnabled:!1;a.sizeOptimizationEnabled="point"===b||"multipoint"===b||"polyline"===
b?a.sizeOptimizationEnabled:!1;if("mesh"===b)a.symbolType="3d-volumetric",a.colorMixMode=a.colorMixMode||"replace",a.edgesType=a.edgesType||"none";else if("3d-volumetric-uniform"===a.symbolType&&"point"!==b)throw new l("color-continuous-renderer:not-supported","3d-volumetric-uniform symbols are supported for point layers only");if(-1<a.symbolType.indexOf("3d-volumetric")&&(!a.view||"3d"!==a.view.type))throw new l("color-age-renderer:invalid-parameters","'view' parameter should be an instance of SceneView when 'symbolType' parameter is '3d-volumetric' or '3d-volumetric-uniform'");
if(c=B.verifyDates(c,a.startTime,a.endTime,"color-age-renderer:invalid-parameters"))throw c;if(a.unit&&-1===B.supportedAgeUnits.indexOf(a.unit))throw new l("color-age-renderer:invalid-unit",`Supported units are: ${B.supportedAgeUnits.join(", ")}`);return a}async function E(a,b){let c=a.colorScheme,f=null;var e=null;e=await d.getBasemapInfo(a.basemap,a.view);f=v.isSome(e.basemapId)?e.basemapId:null;e=v.isSome(e.basemapTheme)?e.basemapTheme:null;if(c)return{scheme:w.cloneScheme(c),basemapId:f,basemapTheme:e};
b=b||a.theme||"high-to-low";const g=w.getSchemes({theme:b,basemap:f,basemapTheme:e,geometryType:a.geometryType,worldScale:a.worldScale,view:a.view});g&&(f=g.basemapId,e=g.basemapTheme,c=a.schemeId?w.getSchemeById({id:b+"/"+f+"/"+a.schemeId,geometryType:a.geometryType}):g.primaryScheme);return{scheme:c,basemapId:f,basemapTheme:e}}async function ca(a,b){b=await E({basemap:b.basemap,colorScheme:b.colorScheme,geometryType:b.layer.geometryType,schemeId:"elevation"===b.field.toLowerCase()?"point-cloud-elevation-scheme":
"point-cloud-intensity-scheme"});const c=b.scheme;if(!c)throw d.createError("color-point-cloud-continuous-renderer:insufficient-info","Unable to find color scheme");const f=d.createColors(c.colors,5);if(5>f.length)throw d.createError("color-point-cloud-continuous-renderer:insufficient-info","Color scheme does not have enough colors");const e=d.getDefaultDataRange(a,!1,!0),g=e?d.createDefaultStopValues(e[0],e[1],5):d.createStopValues(a);return{stops:I.createColorStops({values:g,isDate:!1,dateFormatOptions:null,
colors:f,labelIndexes:[0,2,4]}),basemapId:b.basemapId,basemapTheme:b.basemapTheme,statistics:a,defaultValuesUsed:!!e,colorScheme:w.cloneScheme(c)}}async function da(a,b,c){var f=a.layer;const {field:e,theme:g}=a;var h=e&&"function"!==typeof e?f.getField(e):null,m=h&&"date"===h.type;f=await E({basemap:a.basemap,theme:a.theme,geometryType:f.geometryType,colorScheme:a.colorScheme,worldScale:a.worldScale,view:a.view});h=f.scheme;if(!h)throw d.createError("color-visual-variable:insufficient-info","Unable to find color scheme");
var k=d.createColors(h.colors,5);if(5>k.length)throw d.createError("color-visual-variable:insufficient-info","Color scheme does not have enough colors");const q=-1<h.id.indexOf("seq-");c=d.getDataRange(b,c,g,m,"90-10"!==g);m=d.createDataValues(c,b,g,q);const n=d.createColors(k,5);k=new T({field:e,valueExpression:a.valueExpression,valueExpressionTitle:a.valueExpressionTitle,normalizationField:a.normalizationField,stops:m.map((t,p)=>({value:t,color:n[p]})),legendOptions:a.legendOptions});a=new S({type:"color",
minSliderValue:null!=a.minValue?a.minValue:b.min,maxSliderValue:null!=a.maxValue?a.maxValue:b.max,theme:h.theme});a=new G({visualVariables:[a]});return{basemapId:f.basemapId,basemapTheme:f.basemapTheme,visualVariable:k,statistics:b,defaultValuesUsed:c.defaultValuesUsed,colorScheme:w.cloneScheme(h),authoringInfo:a}}async function M(a,b,c,f,e,g){const h=await D.fetchMessageBundle("esri/smartMapping/t9n/smartMapping"),m=g.field,k=g.layer.geometryType,q=g.defaultSymbolEnabled,n=w.cloneScheme(a.colorScheme),
t=b&&b.opacity,p=[a.visualVariable.clone()];b&&b.visualVariables&&b.visualVariables.length&&p.push(...b.visualVariables.map(y=>y.clone()));c&&c.minSize&&p.push(c.minSize);return{renderer:new H({classBreakInfos:[{minValue:-N,maxValue:N,symbol:d.createSymbol(k,{type:g.symbolType,color:n.noDataColor,size:d.getSymbolSizeFromScheme(n,k),outline:d.getSymbolOutlineFromScheme(n,k,t),meshInfo:{colorMixMode:g.colorMixMode,edgesType:g.edgesType}})}],defaultLabel:q?h.other:null,defaultSymbol:q?d.createSymbol(k,
{type:g.symbolType,color:n.noDataColor,size:d.getSymbolSizeFromScheme(n,k),outline:d.getSymbolOutlineFromScheme(n,k,t),meshInfo:{colorMixMode:g.colorMixMode,edgesType:g.edgesType}}):null,field:m,normalizationType:f,normalizationField:e,valueExpression:g.valueExpression,valueExpressionTitle:g.valueExpressionTitle,visualVariables:p,authoringInfo:a.authoringInfo&&a.authoringInfo.clone()}),visualVariable:a.visualVariable.clone(),statistics:a.statistics,defaultValuesUsed:a.defaultValuesUsed,colorScheme:w.cloneScheme(a.colorScheme),
basemapId:a.basemapId,basemapTheme:a.basemapTheme}}async function F(a){a=await V(a);const {view:b,field:c,valueExpression:f,minValue:e,maxValue:g,layer:h,normalizationField:m,signal:k,statistics:q}=a,[n,t]=await Promise.all([q?q:d.getSummaryStatistics({layer:h,field:c,valueExpression:f,sqlExpression:a.sqlExpression,sqlWhere:a.sqlWhere,normalizationType:m?"field":void 0,normalizationField:m,minValue:e,maxValue:g,view:b,signal:k}),"90-10"===a.theme?d.getClassBreaks({layer:h,field:c,normalizationField:m,
valueExpression:f,classificationMethod:"quantile",minValue:e,maxValue:g,view:b,numClasses:10,signal:k}):null]);return da(a,n,null==t?void 0:t.result)}function ea(a,b){a=a.colorsForClassBreaks;let c;if(a&&0<a.length&&(a.some(e=>{e.numClasses===b&&(c=e.colors);return!!c}),!c)){var f=a[a.length-1];a=b-f.numClasses;if(0<a){const e=f.colors[f.numClasses-1];c=f.colors.splice(0);for(f=1;f<=a;f++)c.push(e)}}c&&(c=d.createColors(c,c.length));return c}async function fa(a,b){var c=await D.fetchMessageBundle("esri/smartMapping/t9n/smartMapping");
const f=a.defaultSymbolEnabled,e=a.layer.geometryType,g=await E({basemap:a.basemap,geometryType:e,colorScheme:a.colorScheme,worldScale:-1<a.symbolType.indexOf("3d-volumetric"),view:a.view}),h=g.scheme,{result:m,outlineResult:k}=b,q=m.classBreakInfos,n=a.classificationMethod,t="standard-deviation"===n,p=a.normalizationType;if(!h)throw new l("color-class-breaks-renderer:insufficient-info","Unable to find color scheme");const y=ea(h,q.length);if(!y||y.length!==q.length)throw new l("color-class-breaks-renderer:insufficient-info",
"Color scheme does not have enough colors");const C=k&&k.opacity;c=new H({classBreakInfos:q.map((z,u)=>({minValue:z.minValue,maxValue:z.maxValue,symbol:d.createSymbol(e,{type:a.symbolType,color:y[u],size:d.getSymbolSizeFromScheme(h,e),outline:d.getSymbolOutlineFromScheme(h,e,C),meshInfo:{colorMixMode:a.colorMixMode,edgesType:a.edgesType}}),label:z.label})),defaultLabel:f?c.other:null,defaultSymbol:f?d.createSymbol(e,{type:a.symbolType,color:h.noDataColor,size:d.getSymbolSizeFromScheme(h,e),outline:d.getSymbolOutlineFromScheme(h,
e,C),meshInfo:{colorMixMode:a.colorMixMode,edgesType:a.edgesType}}):null,field:a.field,valueExpression:a.valueExpression,valueExpressionTitle:a.valueExpressionTitle,normalizationType:p,normalizationField:a.normalizationField,normalizationTotal:"percent-of-total"===p?m.normalizationTotal:void 0,legendOptions:a.legendOptions,authoringInfo:new G({type:"class-breaks-color",classificationMethod:n,standardDeviationInterval:a.standardDeviationInterval})});t||I.setLabelsForClassBreaks({classBreakInfos:c.classBreakInfos,
classificationMethod:n,normalizationType:p,round:!0});k&&k.visualVariables&&k.visualVariables.length&&(c.visualVariables=k.visualVariables.map(z=>z.clone()));return{renderer:c,colorScheme:w.cloneScheme(h),classBreaksResult:m,defaultValuesUsed:b.defaultValuesUsed,basemapId:g.basemapId,basemapTheme:g.basemapTheme}}const N=2**53-1;x.createAgeRenderer=async function(a){var b=await D.fetchMessageBundle("esri/smartMapping/t9n/smartMapping");const c=await ba(a),{defaultSymbolEnabled:f,view:e,startTime:g,
endTime:h,symbolType:m,colorMixMode:k,edgesType:q,minValue:n,maxValue:t,signal:p}=c;a=c.layer;const [y,C,z]=await Promise.all([c.unit?{unit:c.unit,statistics:null}:U({view:e,layer:a,startTime:g,endTime:h,minValue:n,maxValue:t,signal:p}),c.outlineOptimizationEnabled?J({layer:a,view:e,signal:p}):null,c.sizeOptimizationEnabled?K({layer:a,view:e,signal:p}):null]),{unit:u,statistics:ha}=y,O=B.getAgeExpressions({layer:a,startTime:g,endTime:h,unit:u}).valueExpression;b=P.substitute(b[`ageInfo_${u}`],{unit:u,
startTime:d.formatDate(g,u,a),endTime:d.formatDate(h,u,a)});b=await F(L({layer:a,basemap:c.basemap,valueExpression:O,symbolType:m,statistics:ha,legendOptions:{title:b},colorScheme:c.colorScheme,theme:c.theme,view:e,minValue:c.minValue,maxValue:c.maxValue,signal:p}));a=await M(b,C,z,null,null,{layer:a,valueExpression:O,defaultSymbolEnabled:f,symbolType:m,colorMixMode:k,edgesType:q});a.renderer.authoringInfo.visualVariables.forEach(ia=>d.updateAgeRendererAuthoringInfoVV(ia,g,h,u));return{...a,unit:u}};
x.createClassBreaksRenderer=async function(a){a=await X(a);const b=await d.getClassBreaks(Y(a),a.outlineOptimizationEnabled);return fa(a,b)};x.createContinuousRenderer=async function(a){a=await W(a);const {layer:b,view:c,signal:f}=a,[e,g,h]=await Promise.all([F(L(a)),a.outlineOptimizationEnabled?J({layer:b,view:c,signal:f}):null,a.sizeOptimizationEnabled?K({layer:b,view:c,signal:f}):null]),m=a.normalizationField;return M(e,g,h,m?"field":void 0,m,a)};x.createPCContinuousRenderer=async function(a){a=
await aa(a);var b=a.statistics?a.statistics:await d.getSummaryStatistics({layer:a.layer,field:a.field,signal:a.signal});b=await ca(b,a);return{renderer:new R({field:a.field,pointsPerInch:a.density,pointSizeAlgorithm:d.getPointSizeAlgorithm(a.size),stops:b.stops}),basemapId:b.basemapId,basemapTheme:b.basemapTheme,statistics:b.statistics,defaultValuesUsed:b.defaultValuesUsed,colorScheme:b.colorScheme}};x.createPCTrueColorRenderer=function(a){return Z(a).then(b=>({renderer:new Q({field:"RGB",pointsPerInch:b.density,
pointSizeAlgorithm:d.getPointSizeAlgorithm(b.size)})}))};x.createVisualVariable=F;Object.defineProperty(x,"__esModule",{value:!0})});