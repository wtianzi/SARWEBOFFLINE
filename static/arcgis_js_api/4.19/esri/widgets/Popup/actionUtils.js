// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define(["exports","../../core/Logger","../../core/Error","./actions"],function(g,u,f,e){function n(a){const {selectedFeature:c,location:d,view:b}=a;return b?"3d"===b.type?c||d:a.get("selectedFeature.geometry")||d:null}function p(a,c){if("3d"!==(null==c?void 0:c.type)||!a||"esri.Graphic"!==a.declaredClass)return!0;if((c=c.getViewForGraphic(a))&&"whenGraphicBounds"in c){let d=!1;c.whenGraphicBounds(a,{useViewElevation:!0}).then(b=>{d=!b||!b.boundingBox||b.boundingBox[0]===b.boundingBox[3]&&b.boundingBox[1]===
b.boundingBox[4]&&b.boundingBox[2]===b.boundingBox[5]}).catch(()=>{const b=new f("zoom-to:invalid-graphic","Could not zoom to the location of the graphic.",{graphic:a});l.error(b)});return d}return!0}async function q(a){const {location:c,selectedFeature:d,view:b,zoomFactor:h}=a,k=n(a);if(!k)return a=new f("zoom-to:invalid-target-or-view","Cannot zoom to location without a target and view.",{target:k,view:b}),l.error(a),Promise.reject(a);const v=b.scale/h,m=a.get("selectedFeature.geometry")||c,r=m&&
"point"===m.type&&p(d,b);e.zoomToFeature.active=!0;e.zoomToFeature.disabled=!0;await a.view.goTo({target:k,scale:r?v:void 0});e.zoomToFeature.active=!1;e.zoomToFeature.disabled=!1;a.zoomToLocation=null;r&&(a.location=m)}async function t(a){const {selectedFeature:c,view:d}=a;if("2d"!==(null==d?void 0:d.type))throw a=new f("zoomToCluster:invalid-view","View must be 2d MapView.",{view:d}),l.error(a),a;if(!c.isAggregate)throw a=new f("zoomToCluster:invalid-selectedFeature","Selected feature must represent an aggregate/cluster graphic.",
{selectedFeature:c}),l.error(a),a;a=await d.whenLayerView(c.sourceLayer);const b=a.createQuery();b.aggregateIds=[c.getObjectId()];e.zoomToClusteredFeatures.active=!0;e.zoomToClusteredFeatures.disabled=!0;({extent:a}=await a.queryExtent(b));await d.goTo({target:a});e.zoomToClusteredFeatures.active=!1;e.zoomToClusteredFeatures.disabled=!1}const l=u.getLogger("esri.widgets.Popup.PopupViewModel");g.browseAggregateFeatures=async function(a){const {selectedFeature:c,view:d}=a;if("2d"!==(null==d?void 0:
d.type))throw a=new f("browseAggregateFeatures:invalid-view","View must be 2d MapView.",{view:d}),l.error(a),a;if(!c.isAggregate)throw a=new f("browseAggregateFeatures:invalid-selectedFeature","Selected feature must represent an aggregate/cluster graphic.",{selectedFeature:c}),l.error(a),a;var b=await d.whenLayerView(c.sourceLayer);const h=b.createQuery();h.aggregateIds=[c.getObjectId()];e.browseClusteredFeatures.active=!0;e.browseClusteredFeatures.disabled=!0;({features:b}=await b.queryFeatures(h));
e.browseClusteredFeatures.active=!1;e.browseClusteredFeatures.disabled=!1;a.features=[c].concat(b)};g.displayClusterExtent=async function(a){const {selectedFeature:c,view:d}=a;if("2d"!==(null==d?void 0:d.type))throw a=new f("displayClusterExtent:invalid-view","View must be 2d MapView.",{view:d}),l.error(a),a;if(!c.isAggregate)throw a=new f("zoomToCluster:invalid-selectedFeature","Selected feature must represent an aggregate/cluster graphic.",{selectedFeature:c}),l.error(a),a;var b=await d.whenLayerView(c.sourceLayer);
const h=b.createQuery();h.aggregateIds=[c.getObjectId()];({extent:b}=await b.queryExtent(h));a.selectedClusterBoundaryFeature.geometry=b;d.graphics.add(a.selectedClusterBoundaryFeature)};g.getSelectedTarget=n;g.isZoomScreenSize=p;g.removeClusteredFeaturesForBrowsing=function(a){a.features=a.features.filter(c=>c.isAggregate)};g.triggerAction=function(a){const {event:c,view:d}=a;({action:a}=c);var b=d&&d.popup;if(!a)return Promise.reject(new f("trigger-action:missing-arguments","Event has no action"));
if(!b)return Promise.reject(new f("trigger-action:missing-arguments","view.popup is missing"));const {disabled:h,id:k}=a;if(!k)return Promise.reject(new f("trigger-action:invalid-action","action.id is missing"));if(h)return Promise.reject(new f("trigger-action:invalid-action","Action is disabled"));if(k===e.zoomToFeature.id)return q(b.viewModel);if(k===e.zoomToClusteredFeatures.id)return t(b.viewModel);b.viewModel.browseClusterEnabled=!1;k===e.browseClusteredFeatures.id&&(b.featureMenuOpen=!0,b.viewModel.browseClusterEnabled=
!0);if(k===e.removeSelectedFeature.id){b.close();({selectedFeature:a}=b);if(!a)return Promise.reject(new f(`trigger-action:${e.removeSelectedFeature.id}`,"selectedFeature is required",{selectedFeature:a}));({sourceLayer:b}=a);b?b.remove(a):d.graphics.remove(a)}return Promise.resolve()};g.zoomToClusterExtent=t;g.zoomToLocation=q;Object.defineProperty(g,"__esModule",{value:!0})});