// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define("exports ../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../core/has ../../core/object ../../core/maybe ../../core/Logger ../../core/accessorSupport/ensureType ../../core/accessorSupport/decorators/property ../../core/jsonMap ../../core/accessorSupport/decorators/subclass ../../core/Error ../../core/urlUtils ../../core/uuid ../../portal/support/resourceExtension ../../request ../Task".split(" "),function(l,q,r,p,v,w,B,C,D,E,t,u,x,F,G,m,y){async function z(a,d){try{const {data:{supportedTravelModes:b,
defaultTravelMode:f}}=await m(a+("/"===a[a.length-1]?"":"/")+"retrieveTravelModes",{query:{f:"json",token:d}});return{supportedTravelModes:b,defaultTravelMode:f}}catch(b){throw new u("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:b});}}async function A(a,d){var {data:b}=await m(a.substring(0,a.indexOf("/rest/")+6)+"info",{query:{f:"json",token:d}});if(!b||!b.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};a=b.owningSystemUrl;
({data:b}=await m(a+("/"===a[a.length-1]?"":"/")+"sharing/rest/portals/self",{query:{f:"json",token:d}}));b=v.getDeepValue("helperServices.routingUtilities.url",b);if(!b)return{supportedTravelModes:[],defaultTravelMode:null};a=x.urlToObject(a);a=/\/solveClosestFacility$/.test(a.path)?"Route":/\/solveClosestFacility$/.test(a.path)?"ClosestFacility":"ServiceAreas";a=await m(b+("/"===b[b.length-1]?"":"/")+"GetTravelModes/execute",{query:{f:"json",serviceName:a,token:d}});d=[];b=null;if(a&&a.data&&a.data.results&&
a.data.results.length){a=a.data.results;for(const f of a)if("supportedTravelModes"===f.paramName){if(f.value&&f.value.features)for(const {attributes:e}of f.value.features)e&&(a=JSON.parse(e.TravelMode),d.push(a))}else"defaultTravelMode"===f.paramName&&(b=f.value)}return{supportedTravelModes:d,defaultTravelMode:b}}p=a=>{a=function(d){function b(){return d.apply(this,arguments)||this}q._inheritsLoose(b,d);var f=b.prototype;f.getServiceDescription=async function(e){this._serviceDescriptionPromise||(this._serviceDescriptionPromise=
this._fetchServiceDescription(e));return this._serviceDescriptionPromise};f._fetchServiceDescription=async function(e){if(!this.url||!this.parsedUrl)throw new u("network-service:missing-url","Url to Network service is missing");const g=this.url,{data:c}=await m(g,{query:{f:"json",token:e}});c.supportedTravelModes||(c.supportedTravelModes=[]);for(let n=0;n<c.supportedTravelModes.length;n++)c.supportedTravelModes[n].id||(c.supportedTravelModes[n].id=c.supportedTravelModes[n].itemId);e=10.4<=c.currentVersion?
z(g,e):A(g,e);const {defaultTravelMode:h,supportedTravelModes:k}=await e;c.defaultTravelMode=h;c.supportedTravelModes=k;return c};f._isInputGeometryZAware=function(e,g){for(let c=0;c<g.length;c++){const h=e[g[c]];if(h&&h.length)for(const k of h)if(w.isSome(k)&&k.hasZ)return!0}return!1};f._dropZValuesOffInputGeometry=function(e,g){for(let c=0;c<g.length;c++){const h=e[g[c]];if(h&&h.length)for(const k of h)k.z=void 0}console.log("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")};
return b}(a);return a=r.__decorate([t.subclass("esri.tasks.mixins.NAServiceDescription")],a)};l.NAServiceDescription=function(a){function d(){return a.apply(this,arguments)||this}q._inheritsLoose(d,a);return d}(p(y));l.NAServiceDescription=r.__decorate([t.subclass("esri.tasks.mixins.NAServiceDescription")],l.NAServiceDescription);l.NAServiceDescriptionMixin=p;Object.defineProperty(l,"__esModule",{value:!0})});