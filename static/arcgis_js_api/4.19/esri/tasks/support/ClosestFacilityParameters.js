// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.19/esri/copyright.txt for details.
//>>built
define("../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../core/has ../../core/Logger ../../core/accessorSupport/ensureType ../../core/accessorSupport/decorators/property ../../core/jsonMap ../../core/accessorSupport/decorators/reader ../../core/accessorSupport/decorators/subclass ../../core/accessorSupport/decorators/writer ../../core/urlUtils ../../core/uuid ../../portal/support/resourceExtension ../../core/JSONSupport ../../geometry/SpatialReference ../../geometry".split(" "),
function(t,c,f,g,h,d,e,u,v,w,k,l,m,b,x,y){f=new e.JSONMap({esriNAOutputLineNone:"none",esriNAOutputLineStraight:"straight",esriNAOutputLineTrueShape:"true-shape",esriNAOutputLineTrueShapeWithMeasure:"true-shape-with-measure"});g=new e.JSONMap({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",
esriNAUPoints:"points",esriNAUYards:"yards"});h=new e.JSONMap({esriNFSBAllowBacktrack:"allow-backtrack",esriNFSBAtDeadEndsOnly:"at-dead-ends-only",esriNFSBNoBacktrack:"no-backtrack",esriNFSBAtDeadEndsAndIntersections:"at-dead-ends-and-intersections"});k=new e.JSONMap({esriDOTComplete:"complete",esriDOTCompleteNoEvents:"complete-no-events",esriDOTInstructionsOnly:"instructions-only",esriDOTStandard:"standard",esriDOTSummaryOnly:"summary-only"});l=new e.JSONMap({esriNATravelDirectionFromFacility:"from-facility",
esriNATravelDirectionToFacility:"to-facility"});m=new e.JSONMap({esriNATimeOfDayUseAsStartTime:"start",esriNATimeOfDayUseAsEndTime:"end"});e=new e.JSONMap({esriCentimeters:"centimeters",esriDecimalDegrees:"decimal-degrees",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriPoints:"points",esriYards:"yards"});b=function(q){function p(a){a=q.call(this,a)||
this;a.accumulateAttributes=null;a.attributeParameterValues=null;a.defaultCutoff=null;a.defaultTargetFacilityCount=null;a.directionsLanguage=null;a.directionsLengthUnits=null;a.directionsOutputType=null;a.directionsStyleName=null;a.directionsTimeAttribute=null;a.doNotLocateOnRestrictedElements=!0;a.facilities=null;a.impedanceAttribute=null;a.incidents=null;a.outputGeometryPrecision=null;a.outputGeometryPrecisionUnits=null;a.outputLines=null;a.outSpatialReference=null;a.pointBarriers=null;a.polygonBarriers=
null;a.polylineBarriers=null;a.restrictionAttributes=null;a.restrictUTurns=null;a.returnDirections=!1;a.returnFacilities=!1;a.returnIncidents=!1;a.returnPointBarriers=!1;a.returnPolygonBarriers=!1;a.returnPolylineBarriers=!1;a.returnRoutes=!0;a.timeOfDay=null;a.timeOfDayUsage=null;a.travelDirection=null;a.travelMode=null;a.useHierarchy=!1;return a}t._inheritsLoose(p,q);var r=p.prototype;r.readTimeOfDay=function(a,n){return null!=n.timeOfDay?new Date(n.timeOfDay):null};r.writeTimeOfDay=function(a,
n){n.timeOfDay=a?a.getTime():null};return p}(b.JSONSupport);c.__decorate([d.property({type:[String],json:{write:!0}})],b.prototype,"accumulateAttributes",void 0);c.__decorate([d.property({json:{write:!0}})],b.prototype,"attributeParameterValues",void 0);c.__decorate([d.property({type:Number,json:{write:!0}})],b.prototype,"defaultCutoff",void 0);c.__decorate([d.property({type:Number,json:{write:!0}})],b.prototype,"defaultTargetFacilityCount",void 0);c.__decorate([d.property({type:String,json:{write:!0}})],
b.prototype,"directionsLanguage",void 0);c.__decorate([d.property({type:g.apiValues,json:{read:{reader:g.read},write:{writer:g.write}}})],b.prototype,"directionsLengthUnits",void 0);c.__decorate([d.property({type:k.apiValues,json:{read:{reader:k.read},write:{writer:k.write}}})],b.prototype,"directionsOutputType",void 0);c.__decorate([d.property({type:String,json:{write:!0}})],b.prototype,"directionsStyleName",void 0);c.__decorate([d.property({type:String,json:{write:!0}})],b.prototype,"directionsTimeAttribute",
void 0);c.__decorate([d.property({type:Boolean,json:{write:!0}})],b.prototype,"doNotLocateOnRestrictedElements",void 0);c.__decorate([d.property({json:{write:!0}})],b.prototype,"facilities",void 0);c.__decorate([d.property({type:String,json:{read:{source:"impedanceAttributeName"},write:{target:"impedanceAttributeName"}}})],b.prototype,"impedanceAttribute",void 0);c.__decorate([d.property({json:{write:!0}})],b.prototype,"incidents",void 0);c.__decorate([d.property({type:Number,json:{write:!0}})],b.prototype,
"outputGeometryPrecision",void 0);c.__decorate([d.property({type:e.apiValues,json:{read:{reader:e.read},write:{writer:e.write}}})],b.prototype,"outputGeometryPrecisionUnits",void 0);c.__decorate([d.property({type:f.apiValues,json:{read:{reader:f.read},write:{writer:f.write}}})],b.prototype,"outputLines",void 0);c.__decorate([d.property({type:x,json:{write:!0}})],b.prototype,"outSpatialReference",void 0);c.__decorate([d.property({json:{write:!0}})],b.prototype,"pointBarriers",void 0);c.__decorate([d.property({json:{write:!0}})],
b.prototype,"polygonBarriers",void 0);c.__decorate([d.property({json:{write:!0}})],b.prototype,"polylineBarriers",void 0);c.__decorate([d.property({type:[String],json:{write:!0}})],b.prototype,"restrictionAttributes",void 0);c.__decorate([d.property({type:h.apiValues,json:{read:{reader:h.read},write:{writer:h.write}}})],b.prototype,"restrictUTurns",void 0);c.__decorate([d.property({type:Boolean,json:{write:!0}})],b.prototype,"returnDirections",void 0);c.__decorate([d.property({type:Boolean,json:{write:!0}})],
b.prototype,"returnFacilities",void 0);c.__decorate([d.property({type:Boolean,json:{write:!0}})],b.prototype,"returnIncidents",void 0);c.__decorate([d.property({type:Boolean,json:{write:!0}})],b.prototype,"returnPointBarriers",void 0);c.__decorate([d.property({type:Boolean,json:{write:!0}})],b.prototype,"returnPolygonBarriers",void 0);c.__decorate([d.property({type:Boolean,json:{write:!0}})],b.prototype,"returnPolylineBarriers",void 0);c.__decorate([d.property({type:Boolean,json:{write:!0}})],b.prototype,
"returnRoutes",void 0);c.__decorate([d.property({type:Date,json:{type:Number,write:!0}})],b.prototype,"timeOfDay",void 0);c.__decorate([u.reader("timeOfDay")],b.prototype,"readTimeOfDay",null);c.__decorate([w.writer("timeOfDay")],b.prototype,"writeTimeOfDay",null);c.__decorate([d.property({type:m.apiValues,json:{read:{reader:m.read},write:{writer:m.write}}})],b.prototype,"timeOfDayUsage",void 0);c.__decorate([d.property({type:l.apiValues,json:{read:{reader:l.read},write:{writer:l.write}}})],b.prototype,
"travelDirection",void 0);c.__decorate([d.property({json:{write:!0}})],b.prototype,"travelMode",void 0);c.__decorate([d.property({type:Boolean,json:{write:!0}})],b.prototype,"useHierarchy",void 0);return b=c.__decorate([v.subclass("esri.tasks.support.ClosestFacilityParameters")],b)});